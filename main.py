import time
import hmac
import hashlib
import binascii
import json
import os
import sys
import telebot
import threading
import requests
from telebot import types
from dotenv import load_dotenv
import cloudscraper
from datetime import datetime

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
load_dotenv()
API_KEY = os.getenv("SAFETRADE_API_KEY")
API_SECRET = os.getenv("SAFETRADE_API_SECRET")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

# –ü–†–ê–í–ò–õ–¨–ù–´–ô –ë–ê–ó–û–í–´–ô URL –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
BASE_URL = "https://safe.trade/api/v2"

CURRENCY_TO_SELL = "QTC"
CURRENCY_TO_BUY = "USDT"
MARKET_SYMBOL = f"{CURRENCY_TO_SELL.lower()}{CURRENCY_TO_BUY.lower()}"  # qtcusdt
MIN_SELL_AMOUNT = 0.00000001

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
def create_enhanced_scraper():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–µ–π–ø–µ—Ä"""
    session = requests.Session()
    session.headers.update({
        'Content-Type': 'application/json;charset=utf-8',
        'Accept': 'application/json',
        'User-Agent': 'SafeTrade-Client/1.0',
        'Origin': 'https://safe.trade',
        'Referer': 'https://safe.trade/'
    })
    
    return cloudscraper.create_scraper(
        sess=session,
        browser={'browser': 'chrome', 'platform': 'windows', 'desktop': True},
        delay=10
    )

scraper = create_enhanced_scraper()
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# --- –§—É–Ω–∫—Ü–∏–∏ API SafeTrade (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É –ø—Ä–∏–º–µ—Ä—É) ---
def generate_signature(nonce, secret, key):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—å —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É –ø—Ä–∏–º–µ—Ä—É"""
    hash_obj = hmac.new(secret.encode(), digestmod=hashlib.sha256)
    # –ö–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º nonce –∏ key, –∑–∞—Ç–µ–º –≤—ã—á–∏—Å–ª—è–µ–º HMAC hash
    hash_obj.update((nonce + key).encode())
    signature = hash_obj.digest()
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–∏–Ω–∞—Ä–Ω—É—é –ø–æ–¥–ø–∏—Å—å –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    signature_hex = binascii.hexlify(signature).decode()
    return signature_hex

def get_auth_headers():
    """–°–æ–±–∏—Ä–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É –ø—Ä–∏–º–µ—Ä—É"""
    nonce = str(int(time.time() * 1000))  # Nonce –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    if not API_KEY or not API_SECRET:
        raise ValueError("API Key –∏–ª–∏ API Secret –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    
    signature = generate_signature(nonce, API_SECRET, API_KEY)
    
    return {
        "X-Auth-Apikey": API_KEY,
        "X-Auth-Nonce": nonce,
        "X-Auth-Signature": signature,
        "Content-Type": "application/json;charset=utf-8"
    }

def get_balances_safetrade():
    """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å—ã —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É –ø—Ä–∏–º–µ—Ä—É"""
    url = f"{BASE_URL}/trade/account/balances"
    
    try:
        headers = get_auth_headers()
        response = scraper.get(url, headers=headers, timeout=30)
        
        print(f"üì° –û—Ç–≤–µ—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–æ–≤: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç: {data}")
            
            if isinstance(data, list):
                non_zero_balances = [f"{b.get('currency', '').upper()}: `{b.get('balance', '0')}`" 
                                   for b in data if float(b.get('balance', 0)) > 0]
                
                if non_zero_balances:
                    return "–í–∞—à–∏ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã –Ω–∞ SafeTrade:\n\n" + "\n".join(non_zero_balances)
                else:
                    return "–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤ –Ω–∞ SafeTrade."
            else:
                return f"–û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {data}"
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å {response.status_code} - {response.text}"
                
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤: {e}"

def get_current_bid_price(market_symbol):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏"""
    url = f"{BASE_URL}/trade/public/tickers/{market_symbol}"
    
    try:
        response = scraper.get(url, timeout=30)
        
        if response.status_code == 200:
            ticker_data = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞: {ticker_data}")
            
            if isinstance(ticker_data, dict) and 'bid' in ticker_data:
                return float(ticker_data['bid'])
            elif isinstance(ticker_data, dict) and 'buy' in ticker_data:
                return float(ticker_data['buy'])
                
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
        return None

def create_sell_order_safetrade(amount):
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É –ø—Ä–∏–º–µ—Ä—É"""
    url = f"{BASE_URL}/trade/market/orders"
    
    current_bid_price = get_current_bid_price(MARKET_SYMBOL)
    if current_bid_price is None or current_bid_price <= 0:
        return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è {MARKET_SYMBOL}"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É –ø—Ä–∏–º–µ—Ä—É
    data = {
        "market": MARKET_SYMBOL,
        "side": "sell",
        "amount": str(amount),
        "type": "limit"
    }
    data["price"] = str(current_bid_price)
    
    try:
        headers = get_auth_headers()
        print(f"üîÑ –°–æ–∑–¥–∞—é –æ—Ä–¥–µ—Ä: {data}")
        
        response = scraper.post(url, headers=headers, json=data, timeout=30)
        
        print(f"üì° –û—Ç–≤–µ—Ç –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        
        if response.status_code == 200:
            order_details = response.json()
            print(f"‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {order_details}")
            
            if 'id' in order_details:
                threading.Thread(target=track_order, args=(order_details['id'],)).start()
                return format_order_success(order_details)
            else:
                return f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {order_details}"
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: —Å—Ç–∞—Ç—É—Å {response.status_code} - {response.text}"
                
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}"

def format_order_success(order_details):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞"""
    return (
        f"‚úÖ *–£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É!*\n\n"
        f"*–ë–∏—Ä–∂–∞:* SafeTrade\n"
        f"*–ü–∞—Ä–∞:* `{order_details.get('market', 'N/A').upper()}`\n"
        f"*–°—Ç–æ—Ä–æ–Ω–∞:* `{order_details.get('side', 'N/A').capitalize()}`\n"
        f"*–û–±—ä–µ–º:* `{order_details.get('amount', 'N/A')} {CURRENCY_TO_SELL}`\n"
        f"*–¶–µ–Ω–∞:* `{order_details.get('price', 'N/A')} {CURRENCY_TO_BUY}`\n"
        f"*ID –æ—Ä–¥–µ—Ä–∞:* `{order_details.get('id', 'N/A')}`"
    )

def track_order(order_id):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞"""
    max_attempts = 30
    check_interval = 10
    print(f"–ù–∞—á–∏–Ω–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ {order_id}...")
    
    for attempt in range(max_attempts):
        time.sleep(check_interval)
        
        url = f"{BASE_URL}/trade/market/orders/{order_id}"
        try:
            headers = get_auth_headers()
            response = scraper.get(url, headers=headers, timeout=30)
            
            if response.status_code == 200:
                order_info = response.json()
                order_state = order_info.get('state')
                print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_attempts}: –û—Ä–¥–µ—Ä {order_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: '{order_state}'")
                
                if order_state == 'done':
                    message = f"‚úÖ *–û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω!*\n\n*ID –æ—Ä–¥–µ—Ä–∞:* `{order_id}`"
                    send_long_message(ADMIN_CHAT_ID, message, parse_mode='Markdown')
                    return
                elif order_state == 'cancel':
                    message = f"‚ùå *–û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω!*\n\n*ID –æ—Ä–¥–µ—Ä–∞:* `{order_id}`"
                    send_long_message(ADMIN_CHAT_ID, message, parse_mode='Markdown')
                    return
            else:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞: {response.status_code}")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
    
    print(f"–ü—Ä–µ–∫—Ä–∞—â–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ {order_id} –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫.")

# --- –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞ ---
def cleanup_bot_instances():
    """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞"""
    print("üîÑ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞...")
    
    try:
        bot.remove_webhook()
        print("‚úÖ –í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω")
        time.sleep(2)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞: {e}")
    
    try:
        bot.set_webhook()
        print("‚úÖ –í–µ–±—Ö—É–∫ —Å–±—Ä–æ—à–µ–Ω")
        time.sleep(2)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –≤–µ–±—Ö—É–∫–∞: {e}")
    
    try:
        updates = bot.get_updates()
        if updates:
            last_update_id = updates[-1].update_id
            bot.get_updates(offset=last_update_id + 1)
            print(f"‚úÖ –û—á–∏—â–µ–Ω–æ {len(updates)} –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
        else:
            print("‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
    
    print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram ---
@bot.message_handler(commands=['start'])
def handle_start(message):
    welcome_text = """
üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏—Ä–∂–µ–π SafeTrade!*
*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚úÖ `/start` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
üí∞ `/balance` - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã.
üìâ `/sell_qtc` - –ü—Ä–æ–¥–∞—Ç—å –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å QTC –∑–∞ USDT.
üìä `/history` - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤.
‚ù§Ô∏è `/donate` - –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞.
"""
    send_long_message(message.chat.id, text=welcome_text, parse_mode='Markdown')

@bot.message_handler(commands=['balance'])
def handle_balance(message):
    bot.send_message(message.chat.id, "üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –±–∞–ª–∞–Ω—Å—ã —Å SafeTrade...")
    balance_info = get_balances_safetrade()
    send_long_message(message.chat.id, balance_info, parse_mode='Markdown')

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞ ---
if __name__ == "__main__":
    if not all([API_KEY, API_SECRET, TELEGRAM_BOT_TOKEN, ADMIN_CHAT_ID]):
        print("[CRITICAL] –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")
    else:
        try:
            ADMIN_CHAT_ID = int(ADMIN_CHAT_ID)
            print("–ë–æ—Ç SafeTrade –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π BASE_URL: {BASE_URL}")
            
            # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            cleanup_bot_instances()
            
            start_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            try:
                send_long_message(
                    ADMIN_CHAT_ID,
                    f"‚úÖ *–ë–æ—Ç SafeTrade —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!*\n\n*–í—Ä–µ–º—è:* `{start_time}`\n*BASE_URL:* `{BASE_URL}`\n–û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—ã...",
                    parse_mode='Markdown'
                )
                print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (ID: {ADMIN_CHAT_ID})")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
            
            print("–ë–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–ø—Ä–æ—Å Telegram API...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º infinity_polling –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            bot.infinity_polling(timeout=20, long_polling_timeout=30)
            
        except ValueError:
            print("[CRITICAL] ADMIN_CHAT_ID –≤ .env —Ñ–∞–π–ª–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        except Exception as e:
            print(f"[ERROR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            if ADMIN_CHAT_ID:
                try:
                    send_long_message(ADMIN_CHAT_ID, f"‚ùå *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞!*\n\n`{e}`", parse_mode='Markdown')
                except Exception as notify_err:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {notify_err}")
        finally:
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞. –û—Ç–∫–ª—é—á–∞—é polling...")
            try:
                bot.stop_polling()
            except:
                pass
            print("Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω.")
