import asyncio
import logging
import time
import hmac
import hashlib
import binascii
import json
import os
import sys
import re
from datetime import datetime
from contextlib import suppress

import aiohttp
import requests
import cloudscraper
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramAPIError, TelegramRetryAfter
from aiogram.client.bot import DefaultBotProperties

from dotenv import load_dotenv

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
API_KEY = os.getenv("SAFETRADE_API_KEY")
API_SECRET = os.getenv("SAFETRADE_API_SECRET")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BASE_URL = "https://safe.trade/api/v2"
CURRENCY_TO_SELL = "QTC"
CURRENCY_TO_BUY = "USDT"
MARKET_SYMBOL = f"{CURRENCY_TO_SELL.lower()}{CURRENCY_TO_BUY.lower()}"
MIN_SELL_AMOUNT = 0.00000001

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–º–µ—Ä–∞ SafeTrade ---
class SafeTradeClient:
    def __init__(self):
        self.session = None
        self.scraper = None
    
    async def init(self):
        if self.scraper is None:
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ SafeTrade
            session = requests.Session()
            session.headers.update({
                'Content-Type': 'application/json;charset=utf-8',
                'Accept': 'application/json',
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            })
            
            # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–µ–π–ø–µ—Ä —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ Cloudflare
            self.scraper = cloudscraper.create_scraper(
                sess=session,
                browser={
                    'browser': 'chrome',
                    'platform': 'windows',
                    'desktop': True,
                    'mobile': False
                },
                # –í–∞–∂–Ω–æ: –æ—Ç–∫–ª—é—á–∞–µ–º JavaScript –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                interpreter=None,
                delay=10,
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã
                allow_brotli=True,
                ecdhCurve='secp384r1'
            )
            
            # –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è cookies
            try:
                logger.info("üîÑ –ü–æ–ª—É—á–∞—é cookies —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
                response = self.scraper.get("https://safe.trade", timeout=30)
                logger.info(f"‚úÖ Cookies –ø–æ–ª—É—á–µ–Ω—ã, —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏
                init_response = self.scraper.get(f"{BASE_URL}/trade/public/tickers/{MARKET_SYMBOL}", timeout=30)
                logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API —Å–µ—Å—Å–∏–∏, —Å—Ç–∞—Ç—É—Å: {init_response.status_code}")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ cookies: {e}")
    
    async def close(self):
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é —Å–∫—Ä–µ–π–ø–µ—Ä–∞
        if self.scraper:
            if hasattr(self.scraper, 'close'):
                self.scraper.close()
            self.scraper = None
    
    def generate_signature(self, nonce: str, secret: str, key: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ SafeTrade"""
        hash_obj = hmac.new(secret.encode(), digestmod=hashlib.sha256)
        hash_obj.update((nonce + key).encode())
        signature = hash_obj.digest()
        return binascii.hexlify(signature).decode()
    
    def get_auth_headers(self) -> dict:
        """–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ SafeTrade"""
        nonce = str(int(time.time() * 1000))
        if not API_KEY or not API_SECRET:
            raise ValueError("API Key –∏–ª–∏ API Secret –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        
        signature = self.generate_signature(nonce, API_SECRET, API_KEY)
        
        return {
            "X-Auth-Apikey": API_KEY,
            "X-Auth-Nonce": nonce,
            "X-Auth-Signature": signature,
            "Content-Type": "application/json;charset=utf-8"
        }
    
    async def get_balances(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ SafeTrade"""
        await self.init()
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
        endpoints = [
            f"{BASE_URL}/trade/account/balances",
            f"{BASE_URL}/peatio/account/balances",
            f"{BASE_URL}/account/balances"
        ]
        
        for endpoint in endpoints:
            try:
                headers = self.get_auth_headers()
                logger.info(f"üîÑ –ü—Ä–æ–±—É—é —ç–Ω–¥–ø–æ–∏–Ω—Ç: {endpoint}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
                response = self.scraper.get(endpoint, headers=headers, timeout=30)
                logger.info(f"üì° –û—Ç–≤–µ—Ç –æ—Ç {endpoint}: —Å—Ç–∞—Ç—É—Å {response.status_code}")
                
                if response.status_code == 200:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ JSON
                    try:
                        data = response.json()
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π JSON –æ—Ç–≤–µ—Ç: {data}")
                        
                        if isinstance(data, list):
                            non_zero_balances = [
                                f"{b.get('currency', '').upper()}: <code>{b.get('balance', '0')}</code>"
                                for b in data if float(b.get('balance', 0)) > 0
                            ]
                            
                            if non_zero_balances:
                                return "–í–∞—à–∏ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã –Ω–∞ SafeTrade:\n\n" + "\n".join(non_zero_balances)
                            else:
                                return "–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤ –Ω–∞ SafeTrade."
                        else:
                            return f"–û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: <code>{str(data)[:200]}</code>"
                    except json.JSONDecodeError:
                        logger.error(f"‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ-JSON –æ—Ç–≤–µ—Ç –æ—Ç {endpoint}")
                        continue
                        
                elif response.status_code == 403:
                    logger.error(f"‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –∫ {endpoint} (Cloudflare)")
                    # –ï—Å–ª–∏ –≤—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç 403, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
                    continue
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code} –¥–ª—è {endpoint}")
                    continue
                    
            except Exception as e:
                logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {endpoint}: {e}")
                continue
        
        # –ï—Å–ª–∏ –≤—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
        return await self.alternative_get_balances()
    
    async def alternative_get_balances(self) -> str:
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥"""
        try:
            logger.info("üîÑ –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤...")
            
            # –ú–µ—Ç–æ–¥ 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º aiohttp —Å –ø—Ä–æ–∫—Å–∏-–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            headers = self.get_auth_headers()
            headers.update({
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                'Accept-Language': 'en-US,en;q=0.5',
                'Accept-Encoding': 'gzip, deflate, br',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1'
            })
            
            # –ü—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ aiohttp
            if not self.session:
                self.session = aiohttp.ClientSession(
                    timeout=aiohttp.ClientTimeout(total=30),
                    headers=headers
                )
            
            async with self.session.get(f"{BASE_URL}/trade/account/balances") as response:
                logger.info(f"üì° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å, —Å—Ç–∞—Ç—É—Å: {response.status}")
                
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —É—Å–ø–µ—à–µ–Ω: {data}")
                    
                    if isinstance(data, list):
                        non_zero_balances = [
                            f"{b.get('currency', '').upper()}: <code>{b.get('balance', '0')}</code>"
                            for b in data if float(b.get('balance', 0)) > 0
                        ]
                        
                        if non_zero_balances:
                            return "–í–∞—à–∏ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã –Ω–∞ SafeTrade (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥):\n\n" + "\n".join(non_zero_balances)
                        else:
                            return "–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤ –Ω–∞ SafeTrade."
                
        except Exception as e:
            logger.error(f"‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
        
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã. –í—Å–µ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞ –∫ API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã Cloudflare. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    async def get_current_bid_price(self, market_symbol: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"""
        await self.init()
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
            url = f"{BASE_URL}/trade/public/tickers/{market_symbol}"
            response = self.scraper.get(url, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞: {data}")
                
                if isinstance(data, dict):
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞
                    if 'bid' in data:
                        return float(data['bid'])
                    elif 'buy' in data:
                        return float(data['buy'])
                    elif 'ticker' in data and isinstance(data['ticker'], dict):
                        ticker = data['ticker']
                        if 'bid' in ticker:
                            return float(ticker['bid'])
                        elif 'buy' in ticker:
                            return float(ticker['buy'])
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
        
        return None
    
    async def create_sell_order(self, amount: float) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É"""
        await self.init()
        
        current_bid_price = await self.get_current_bid_price(MARKET_SYMBOL)
        if current_bid_price is None or current_bid_price <= 0:
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è {MARKET_SYMBOL}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ SafeTrade
        data = {
            "market": MARKET_SYMBOL,
            "side": "sell",
            "amount": str(amount),
            "type": "limit",
            "price": str(current_bid_price)
        }
        
        try:
            headers = self.get_auth_headers()
            logger.info(f"üîÑ –°–æ–∑–¥–∞—é –æ—Ä–¥–µ—Ä: {data}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π POST –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
            response = self.scraper.post(
                f"{BASE_URL}/trade/market/orders",
                headers=headers,
                json=data,
                timeout=30
            )
            
            logger.info(f"üì° –û—Ç–≤–µ—Ç –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            
            if response.status_code == 200:
                order_details = response.json()
                logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {order_details}")
                
                if 'id' in order_details:
                    asyncio.create_task(self.track_order(order_details['id']))
                    return self.format_order_success(order_details)
                else:
                    return f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: <code>{str(order_details)[:200]}</code>"
            else:
                error_text = response.text
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {error_text[:500]}")
                return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: —Å—Ç–∞—Ç—É—Å {response.status_code}"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: <code>{str(e)[:200]}</code>"
    
    def format_order_success(self, order_details: dict) -> str:
        return (
            f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É!</b>\n\n"
            f"<b>–ë–∏—Ä–∂–∞:</b> SafeTrade\n"
            f"<b>–ü–∞—Ä–∞:</b> <code>{order_details.get('market', 'N/A').upper()}</code>\n"
            f"<b>–°—Ç–æ—Ä–æ–Ω–∞:</b> <code>{order_details.get('side', 'N/A').capitalize()}</code>\n"
            f"<b>–û–±—ä–µ–º:</b> <code>{order_details.get('amount', 'N/A')} {CURRENCY_TO_SELL}</code>\n"
            f"<b>–¶–µ–Ω–∞:</b> <code>{order_details.get('price', 'N/A')} {CURRENCY_TO_BUY}</code>\n"
            f"<b>ID –æ—Ä–¥–µ—Ä–∞:</b> <code>{order_details.get('id', 'N/A')}</code>"
        )
    
    async def track_order(self, order_id: str):
        max_attempts = 30
        check_interval = 10
        logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ {order_id}...")
        
        for attempt in range(max_attempts):
            await asyncio.sleep(check_interval)
            
            try:
                headers = self.get_auth_headers()
                response = self.scraper.get(
                    f"{BASE_URL}/trade/market/orders/{order_id}",
                    headers=headers,
                    timeout=30
                )
                
                if response.status_code == 200:
                    order_info = response.json()
                    order_state = order_info.get('state')
                    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_attempts}: –û—Ä–¥–µ—Ä {order_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: '{order_state}'")
                    
                    if order_state == 'done':
                        message = f"‚úÖ <b>–û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω!</b>\n\n<b>ID –æ—Ä–¥–µ—Ä–∞:</b> <code>{order_id}</code>"
                        await self.send_safe_message(ADMIN_CHAT_ID, message)
                        return
                    elif order_state == 'cancel':
                        message = f"‚ùå <b>–û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω!</b>\n\n<b>ID –æ—Ä–¥–µ—Ä–∞:</b> <code>{order_id}</code>"
                        await self.send_safe_message(ADMIN_CHAT_ID, message)
                        return
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
        
        logger.info(f"–ü—Ä–µ–∫—Ä–∞—â–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ {order_id} –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫.")
    
    async def send_safe_message(self, chat_id: str, text: str):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            await bot.send_message(chat_id, text)
        except TelegramRetryAfter as e:
            logger.warning(f"–§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å, –∂–¥—É {e.retry_after} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(e.retry_after)
            await bot.send_message(chat_id, text)
        except TelegramAPIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
safetrade_client = SafeTradeClient()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@router.message(CommandStart())
async def handle_start(message: Message):
    welcome_text = """
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏—Ä–∂–µ–π SafeTrade!</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚úÖ <code>/start</code> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
üí∞ <code>/balance</code> - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã.
üìâ <code>/sell_qtc</code> - –ü—Ä–æ–¥–∞—Ç—å –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å QTC –∑–∞ USDT.
‚ù§Ô∏è <code>/donate</code> - –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞.
üîß <code>/status</code> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞.
üîÑ <code>/test_api</code> - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API.
"""
    await message.answer(welcome_text)

@router.message(Command("balance"))
async def handle_balance(message: Message):
    await message.answer("üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –±–∞–ª–∞–Ω—Å—ã —Å SafeTrade...")
    balance_info = await safetrade_client.get_balances()
    await message.answer(balance_info)

@router.message(Command("test_api"))
async def handle_test_api(message: Message):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
    await message.answer("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SafeTrade API...")
    
    try:
        await safetrade_client.init()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        test_url = f"{BASE_URL}/trade/public/tickers/{MARKET_SYMBOL}"
        response = safetrade_client.scraper.get(test_url, timeout=30)
        
        if response.status_code == 200:
            await message.answer(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —É—Å–ø–µ—à–Ω–æ!\n–°—Ç–∞—Ç—É—Å: {response.status_code}\nURL: {test_url}")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code}\n{response.text[:200]}")
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: <code>{str(e)[:200]}</code>")

@router.message(Command("donate"))
async def handle_donate(message: Message):
    donate_url = "https://boosty.to/vokforever/donate"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ ‚ù§Ô∏è", url=donate_url)]
        ]
    )
    await message.answer(
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ. –°–ø–∞—Å–∏–±–æ!",
        reply_markup=keyboard
    )

@router.message(Command("status"))
async def handle_status(message: Message):
    status_text = f"""
ü§ñ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ SafeTrade</b>

‚è∞ <b>–í—Ä–µ–º—è:</b> <code>{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</code>
üìç <b>BASE_URL:</b> <code>{BASE_URL}</code>
üÜî <b>Bot ID:</b> <code>{bot.id}</code>
üë§ <b>–í–∞—à ID:</b> <code>{message.from_user.id}</code>
"""
    await message.answer(status_text)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---
@router.errors()
async def error_handler(event: types.ErrorEvent):
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {event.exception}", exc_info=True)
    
    with suppress(Exception):
        error_msg = str(event.exception)
        await bot.send_message(
            ADMIN_CHAT_ID,
            f"‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:</b>\n<code>{error_msg[:500]}</code>"
        )

# --- –§—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ---
async def on_startup(dispatcher: Dispatcher):
    logger.info("üöÄ –ë–æ—Ç SafeTrade –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    await bot.delete_webhook(drop_pending_updates=True)
    
    if WEBHOOK_URL:
        await bot.set_webhook(WEBHOOK_URL)
        logger.info(f"üì° –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    else:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ polling...")
    
    with suppress(Exception):
        start_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        await bot.send_message(
            ADMIN_CHAT_ID,
            f"‚úÖ <b>–ë–æ—Ç SafeTrade —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
            f"<b>–í—Ä–µ–º—è:</b> <code>{start_time}</code>\n"
            f"<b>BASE_URL:</b> <code>{BASE_URL}</code>\n"
            f"<b>–†–µ–∂–∏–º:</b> <code>–í–µ–±—Ö—É–∫</code>" if WEBHOOK_URL else "<code>Polling</code>"
        )

async def on_shutdown(dispatcher: Dispatcher):
    logger.info("üõë –ë–æ—Ç SafeTrade –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    
    await safetrade_client.close()
    await bot.delete_webhook()
    await bot.session.close()
    
    logger.info("‚úÖ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---
async def main():
    await safetrade_client.init()
    
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    if WEBHOOK_URL:
        from aiogram.webhook.aiohttp_server import SimpleRequestHandler
        from aiohttp import web
        
        app = web.Application()
        webhook_requests_handler = SimpleRequestHandler(
            dispatcher=dp,
            bot=bot
        )
        
        webhook_requests_handler.register(app, path="/webhook")
        
        runner = web.AppRunner(app)
        await runner.setup()
        
        site = web.TCPSite(runner, '0.0.0.0', 8080)
        await site.start()
        
        logger.info("üöÄ –°–µ—Ä–≤–µ—Ä –≤–µ–±—Ö—É–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")
        
        try:
            await dp.start_polling(bot)
        finally:
            await runner.cleanup()
    else:
        await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
