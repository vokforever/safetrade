import asyncio
import logging
import time
import hmac
import hashlib
import binascii
import json
import os
import sys
import re
from datetime import datetime
from contextlib import suppress

import aiohttp
import cloudscraper
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramAPIError, TelegramRetryAfter
from aiogram.client.bot import DefaultBotProperties

from dotenv import load_dotenv

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
API_KEY = os.getenv("SAFETRADE_API_KEY")
API_SECRET = os.getenv("SAFETRADE_API_SECRET")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BASE_URL = "https://safe.trade/api/v2"
CURRENCY_TO_SELL = "QTC"
CURRENCY_TO_BUY = "USDT"
MARKET_SYMBOL = f"{CURRENCY_TO_SELL.lower()}{CURRENCY_TO_BUY.lower()}"
MIN_SELL_AMOUNT = 0.00000001

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def is_html_response(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π"""
    html_patterns = [
        r'<!DOCTYPE html>',
        r'<html',
        r'<head>',
        r'<body',
        r'Cloudflare',
        r'Attention Required!',
        r'jschallenge'
    ]
    return any(re.search(pattern, text, re.IGNORECASE) for pattern in html_patterns)

def sanitize_for_telegram(text: str) -> str:
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
    if not text:
        return "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"
    
    # –ï—Å–ª–∏ —ç—Ç–æ HTML, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if is_html_response(text):
        return "‚ùå –ü–æ–ª—É—á–µ–Ω HTML –æ—Ç–≤–µ—Ç –≤–º–µ—Å—Ç–æ JSON. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å Cloudflare –∏–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
    
    # –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'[<>]', '', text)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(text) > 4000:
        text = text[:3997] + "..."
    
    return text

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP –∫–ª–∏–µ–Ω—Ç–∞ ---
class SafeTradeClient:
    def __init__(self):
        self.session = None
        self.scraper = None
    
    async def init(self):
        if self.session is None:
            self.session = aiohttp.ClientSession(
                timeout=aiohttp.ClientTimeout(total=30),
                headers={
                    'Content-Type': 'application/json;charset=utf-8',
                    'Accept': 'application/json',
                    'User-Agent': 'SafeTrade-Client/1.0',
                    'Origin': 'https://safe.trade',
                    'Referer': 'https://safe.trade/'
                }
            )
        
        if self.scraper is None:
            self.scraper = cloudscraper.create_scraper(
                browser={'browser': 'chrome', 'platform': 'windows', 'desktop': True},
                delay=10
            )
    
    async def close(self):
        if self.session:
            await self.session.close()
            self.session = None
    
    def generate_signature(self, nonce: str, secret: str, key: str) -> str:
        hash_obj = hmac.new(secret.encode(), digestmod=hashlib.sha256)
        hash_obj.update((nonce + key).encode())
        signature = hash_obj.digest()
        return binascii.hexlify(signature).decode()
    
    def get_auth_headers(self) -> dict:
        nonce = str(int(time.time() * 1000))
        if not API_KEY or not API_SECRET:
            raise ValueError("API Key –∏–ª–∏ API Secret –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        
        signature = self.generate_signature(nonce, API_SECRET, API_KEY)
        
        return {
            "X-Auth-Apikey": API_KEY,
            "X-Auth-Nonce": nonce,
            "X-Auth-Signature": signature,
            "Content-Type": "application/json;charset=utf-8"
        }
    
    async def get_balances(self) -> str:
        await self.init()
        url = f"{BASE_URL}/trade/account/balances"
        
        try:
            headers = self.get_auth_headers()
            async with self.session.get(url, headers=headers) as response:
                logger.info(f"üì° –û—Ç–≤–µ—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–æ–≤: —Å—Ç–∞—Ç—É—Å {response.status}")
                
                if response.status == 200:
                    content_type = response.headers.get('content-type', '')
                    if 'application/json' not in content_type:
                        text_response = await response.text()
                        logger.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ-JSON –æ—Ç–≤–µ—Ç: {text_response[:200]}")
                        return "‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ-JSON –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
                    
                    data = await response.json()
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç: {data}")
                    
                    if isinstance(data, list):
                        non_zero_balances = [
                            f"{b.get('currency', '').upper()}: <code>{b.get('balance', '0')}</code>"
                            for b in data if float(b.get('balance', 0)) > 0
                        ]
                        
                        if non_zero_balances:
                            return "–í–∞—à–∏ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã –Ω–∞ SafeTrade:\n\n" + "\n".join(non_zero_balances)
                        else:
                            return "–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤ –Ω–∞ SafeTrade."
                    else:
                        return f"–û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: <code>{str(data)[:200]}</code>"
                else:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å {response.status}, –æ—Ç–≤–µ—Ç: {error_text[:500]}")
                    
                    if is_html_response(error_text):
                        return "‚ùå –î–æ—Å—Ç—É–ø –∫ API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (Cloudflare). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞."
                    else:
                        return f"‚ùå –û—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å {response.status} - <code>{sanitize_for_telegram(error_text[:200])}</code>"
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤: <code>{sanitize_for_telegram(str(e))}</code>"
    
    async def get_current_bid_price(self, market_symbol: str) -> float:
        await self.init()
        url = f"{BASE_URL}/trade/public/tickers/{market_symbol}"
        
        try:
            async with self.session.get(url) as response:
                if response.status == 200:
                    content_type = response.headers.get('content-type', '')
                    if 'application/json' not in content_type:
                        logger.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ-JSON –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–∏–∫–µ—Ä–∞: {await response.text()[:200]}")
                        return None
                    
                    ticker_data = await response.json()
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞: {ticker_data}")
                    
                    if isinstance(ticker_data, dict):
                        if 'bid' in ticker_data:
                            return float(ticker_data['bid'])
                        elif 'buy' in ticker_data:
                            return float(ticker_data['buy'])
                        elif 'ticker' in ticker_data and isinstance(ticker_data['ticker'], dict):
                            if 'bid' in ticker_data['ticker']:
                                return float(ticker_data['ticker']['bid'])
                            elif 'buy' in ticker_data['ticker']:
                                return float(ticker_data['ticker']['buy'])
                return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
            return None
    
    async def create_sell_order(self, amount: float) -> str:
        await self.init()
        url = f"{BASE_URL}/trade/market/orders"
        
        current_bid_price = await self.get_current_bid_price(MARKET_SYMBOL)
        if current_bid_price is None or current_bid_price <= 0:
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è {MARKET_SYMBOL}"
        
        data = {
            "market": MARKET_SYMBOL,
            "side": "sell",
            "amount": str(amount),
            "type": "limit",
            "price": str(current_bid_price)
        }
        
        try:
            headers = self.get_auth_headers()
            logger.info(f"üîÑ –°–æ–∑–¥–∞—é –æ—Ä–¥–µ—Ä: {data}")
            
            async with self.session.post(url, headers=headers, json=data) as response:
                logger.info(f"üì° –û—Ç–≤–µ—Ç –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: —Å—Ç–∞—Ç—É—Å {response.status}")
                
                if response.status == 200:
                    content_type = response.headers.get('content-type', '')
                    if 'application/json' not in content_type:
                        text_response = await response.text()
                        logger.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ-JSON –æ—Ç–≤–µ—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {text_response[:200]}")
                        return "‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ-JSON –æ—Ç–≤–µ—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞."
                    
                    order_details = await response.json()
                    logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {order_details}")
                    
                    if 'id' in order_details:
                        asyncio.create_task(self.track_order(order_details['id']))
                        return self.format_order_success(order_details)
                    else:
                        return f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: <code>{sanitize_for_telegram(str(order_details)[:200])}</code>"
                else:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: —Å—Ç–∞—Ç—É—Å {response.status}, –æ—Ç–≤–µ—Ç: {error_text[:500]}")
                    
                    if is_html_response(error_text):
                        return "‚ùå –î–æ—Å—Ç—É–ø –∫ API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (Cloudflare). –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä."
                    else:
                        return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: —Å—Ç–∞—Ç—É—Å {response.status} - <code>{sanitize_for_telegram(error_text[:200])}</code>"
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: <code>{sanitize_for_telegram(str(e))}</code>"
    
    def format_order_success(self, order_details: dict) -> str:
        return (
            f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É!</b>\n\n"
            f"<b>–ë–∏—Ä–∂–∞:</b> SafeTrade\n"
            f"<b>–ü–∞—Ä–∞:</b> <code>{order_details.get('market', 'N/A').upper()}</code>\n"
            f"<b>–°—Ç–æ—Ä–æ–Ω–∞:</b> <code>{order_details.get('side', 'N/A').capitalize()}</code>\n"
            f"<b>–û–±—ä–µ–º:</b> <code>{order_details.get('amount', 'N/A')} {CURRENCY_TO_SELL}</code>\n"
            f"<b>–¶–µ–Ω–∞:</b> <code>{order_details.get('price', 'N/A')} {CURRENCY_TO_BUY}</code>\n"
            f"<b>ID –æ—Ä–¥–µ—Ä–∞:</b> <code>{order_details.get('id', 'N/A')}</code>"
        )
    
    async def track_order(self, order_id: str):
        max_attempts = 30
        check_interval = 10
        logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ {order_id}...")
        
        for attempt in range(max_attempts):
            await asyncio.sleep(check_interval)
            
            url = f"{BASE_URL}/trade/market/orders/{order_id}"
            try:
                headers = self.get_auth_headers()
                async with self.session.get(url, headers=headers) as response:
                    if response.status == 200:
                        content_type = response.headers.get('content-type', '')
                        if 'application/json' not in content_type:
                            logger.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ-JSON –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {await response.text()[:200]}")
                            continue
                        
                        order_info = await response.json()
                        order_state = order_info.get('state')
                        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_attempts}: –û—Ä–¥–µ—Ä {order_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: '{order_state}'")
                        
                        if order_state == 'done':
                            message = f"‚úÖ <b>–û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω!</b>\n\n<b>ID –æ—Ä–¥–µ—Ä–∞:</b> <code>{order_id}</code>"
                            await self.send_safe_message(ADMIN_CHAT_ID, message)
                            return
                        elif order_state == 'cancel':
                            message = f"‚ùå <b>–û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω!</b>\n\n<b>ID –æ—Ä–¥–µ—Ä–∞:</b> <code>{order_id}</code>"
                            await self.send_safe_message(ADMIN_CHAT_ID, message)
                            return
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞: {response.status}")
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
        
        logger.info(f"–ü—Ä–µ–∫—Ä–∞—â–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ {order_id} –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫.")
    
    async def send_safe_message(self, chat_id: str, text: str):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            await bot.send_message(chat_id, text)
        except TelegramRetryAfter as e:
            logger.warning(f"–§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å, –∂–¥—É {e.retry_after} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(e.retry_after)
            await bot.send_message(chat_id, text)
        except TelegramAPIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
safetrade_client = SafeTradeClient()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@router.message(CommandStart())
async def handle_start(message: Message):
    welcome_text = """
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏—Ä–∂–µ–π SafeTrade!</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚úÖ <code>/start</code> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
üí∞ <code>/balance</code> - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã.
üìâ <code>/sell_qtc</code> - –ü—Ä–æ–¥–∞—Ç—å –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å QTC –∑–∞ USDT.
‚ù§Ô∏è <code>/donate</code> - –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞.
üîß <code>/status</code> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞.
"""
    await message.answer(welcome_text)

@router.message(Command("balance"))
async def handle_balance(message: Message):
    await message.answer("üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –±–∞–ª–∞–Ω—Å—ã —Å SafeTrade...")
    balance_info = await safetrade_client.get_balances()
    await message.answer(balance_info)

@router.message(Command("sell_qtc"))
async def handle_sell(message: Message):
    await message.answer(f"–ò—â—É <code>{CURRENCY_TO_SELL}</code> –Ω–∞ –±–∞–ª–∞–Ω—Å–µ...")
    
    try:
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç get_balances
        await message.answer("‚ÑπÔ∏è –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–¥–∞–∂–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ: <code>{sanitize_for_telegram(str(e))}</code>")

@router.message(Command("donate"))
async def handle_donate(message: Message):
    donate_url = "https://boosty.to/vokforever/donate"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ ‚ù§Ô∏è", url=donate_url)]
        ]
    )
    await message.answer(
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ. –°–ø–∞—Å–∏–±–æ!",
        reply_markup=keyboard
    )

@router.message(Command("status"))
async def handle_status(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    status_text = f"""
ü§ñ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ SafeTrade</b>

‚è∞ <b>–í—Ä–µ–º—è:</b> <code>{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</code>
üìç <b>BASE_URL:</b> <code>{BASE_URL}</code>
üÜî <b>Bot ID:</b> <code>{bot.id}</code>
üë§ <b>–í–∞—à ID:</b> <code>{message.from_user.id}</code>
"""
    await message.answer(status_text)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---
@router.errors()
async def error_handler(event: types.ErrorEvent):
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {event.exception}", exc_info=True)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    with suppress(Exception):
        error_msg = str(event.exception)
        safe_error_msg = sanitize_for_telegram(error_msg)
        await bot.send_message(
            ADMIN_CHAT_ID,
            f"‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:</b>\n<code>{safe_error_msg[:500]}</code>"
        )

# --- –§—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ---
async def on_startup(dispatcher: Dispatcher):
    logger.info("üöÄ –ë–æ—Ç SafeTrade –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫
    await bot.delete_webhook(drop_pending_updates=True)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω URL
    if WEBHOOK_URL:
        await bot.set_webhook(WEBHOOK_URL)
        logger.info(f"üì° –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    else:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ polling...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    with suppress(Exception):
        start_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        await bot.send_message(
            ADMIN_CHAT_ID,
            f"‚úÖ <b>–ë–æ—Ç SafeTrade —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
            f"<b>–í—Ä–µ–º—è:</b> <code>{start_time}</code>\n"
            f"<b>BASE_URL:</b> <code>{BASE_URL}</code>\n"
            f"<b>–†–µ–∂–∏–º:</b> <code>–í–µ–±—Ö—É–∫</code>" if WEBHOOK_URL else "<code>Polling</code>"
        )

async def on_shutdown(dispatcher: Dispatcher):
    logger.info("üõë –ë–æ—Ç SafeTrade –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç
    await safetrade_client.close()
    
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫
    await bot.delete_webhook()
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
    await bot.session.close()
    
    logger.info("‚úÖ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---
async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    await safetrade_client.init()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—É–∫–æ–≤ –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    if WEBHOOK_URL:
        # –ó–∞–ø—É—Å–∫ —Å –≤–µ–±—Ö—É–∫–æ–º
        from aiogram.webhook.aiohttp_server import SimpleRequestHandler
        from aiohttp import web
        
        app = web.Application()
        webhook_requests_handler = SimpleRequestHandler(
            dispatcher=dp,
            bot=bot
        )
        
        webhook_requests_handler.register(app, path="/webhook")
        
        runner = web.AppRunner(app)
        await runner.setup()
        
        site = web.TCPSite(runner, '0.0.0.0', 8080)
        await site.start()
        
        logger.info("üöÄ –°–µ—Ä–≤–µ—Ä –≤–µ–±—Ö—É–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")
        
        try:
            await dp.start_polling(bot)
        finally:
            await runner.cleanup()
    else:
        # –ó–∞–ø—É—Å–∫ —Å polling
        await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
