import time
import hmac
import hashlib
import binascii
import json
import os
import sys
import signal
import telebot
import threading
import requests
from telebot import types
from dotenv import load_dotenv
import cloudscraper
from datetime import datetime

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
load_dotenv()
API_KEY = os.getenv("SAFETRADE_API_KEY")
API_SECRET = os.getenv("SAFETRADE_API_SECRET")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

BASE_URL = "https://safe.trade/api/v2"
CURRENCY_TO_SELL = "QTC"
CURRENCY_TO_BUY = "USDT"
MARKET_SYMBOL = f"{CURRENCY_TO_SELL.lower()}{CURRENCY_TO_BUY.lower()}"
MIN_SELL_AMOUNT = 0.00000001

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
def create_enhanced_scraper():
    session = requests.Session()
    session.headers.update({
        'Content-Type': 'application/json;charset=utf-8',
        'Accept': 'application/json',
        'User-Agent': 'SafeTrade-Client/1.0',
        'Origin': 'https://safe.trade',
        'Referer': 'https://safe.trade/'
    })
    
    return cloudscraper.create_scraper(
        sess=session,
        browser={'browser': 'chrome', 'platform': 'windows', 'desktop': True},
        delay=10
    )

scraper = create_enhanced_scraper()
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# --- –§—É–Ω–∫—Ü–∏–∏ API SafeTrade ---
def generate_signature(nonce, secret, key):
    hash_obj = hmac.new(secret.encode(), digestmod=hashlib.sha256)
    hash_obj.update((nonce + key).encode())
    signature = hash_obj.digest()
    signature_hex = binascii.hexlify(signature).decode()
    return signature_hex

def get_auth_headers():
    nonce = str(int(time.time() * 1000))
    if not API_KEY or not API_SECRET:
        raise ValueError("API Key –∏–ª–∏ API Secret –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    
    signature = generate_signature(nonce, API_SECRET, API_KEY)
    
    return {
        "X-Auth-Apikey": API_KEY,
        "X-Auth-Nonce": nonce,
        "X-Auth-Signature": signature,
        "Content-Type": "application/json;charset=utf-8"
    }

def get_balances_safetrade():
    url = f"{BASE_URL}/trade/account/balances"
    
    try:
        headers = get_auth_headers()
        response = scraper.get(url, headers=headers, timeout=30)
        
        print(f"üì° –û—Ç–≤–µ—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–æ–≤: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç: {data}")
            
            if isinstance(data, list):
                non_zero_balances = [f"{b.get('currency', '').upper()}: `{b.get('balance', '0')}`" 
                                   for b in data if float(b.get('balance', 0)) > 0]
                
                if non_zero_balances:
                    return "–í–∞—à–∏ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã –Ω–∞ SafeTrade:\n\n" + "\n".join(non_zero_balances)
                else:
                    return "–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤ –Ω–∞ SafeTrade."
            else:
                return f"–û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {data}"
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å {response.status_code} - {response.text}"
                
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤: {e}"

# --- –†–ê–î–ò–ö–ê–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –í–°–ï–• –≠–ö–ó–ï–ú–ü–õ–Ø–†–û–í –ë–û–¢–ê ---
def force_cleanup_all_instances():
    """–†–∞–¥–∏–∫–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞"""
    print("üîÑ –ù–ê–ß–ò–ù–ê–Æ –†–ê–î–ò–ö–ê–õ–¨–ù–£–Æ –û–ß–ò–°–¢–ö–£ –í–°–ï–• –≠–ö–ó–ï–ú–ü–õ–Ø–†–û–í –ë–û–¢–ê...")
    
    # 1. –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
    for i in range(3):
        try:
            bot.remove_webhook()
            print(f"‚úÖ –í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ {i+1})")
            time.sleep(1)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {i+1}): {e}")
    
    # 2. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    try:
        bot.set_webhook()
        print("‚úÖ –í–µ–±—Ö—É–∫ —Å–±—Ä–æ—à–µ–Ω")
        time.sleep(2)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –≤–µ–±—Ö—É–∫–∞: {e}")
    
    # 3. –ú–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    for i in range(5):
        try:
            updates = bot.get_updates()
            if updates:
                last_update_id = updates[-1].update_id
                bot.get_updates(offset=last_update_id + 1)
                print(f"‚úÖ –û—á–∏—â–µ–Ω–æ {len(updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–ø–æ–ø—ã—Ç–∫–∞ {i+1})")
            else:
                print(f"‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–ø–æ–ø—ã—Ç–∫–∞ {i+1})")
            time.sleep(1)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–ø–æ–ø—ã—Ç–∫–∞ {i+1}): {e}")
    
    # 4. –£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–º–µ–Ω–∞–º–∏
    try:
        import psutil
        current_pid = os.getpid()
        killed_count = 0
        
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
                if proc.info['pid'] == current_pid:
                    continue
                
                # –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã Python
                if 'python' in proc.info['name'].lower():
                    cmdline = proc.info.get('cmdline', [])
                    cmdline_str = ' '.join(str(cmd) for cmd in cmdline)
                    
                    # –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º
                    if any(keyword in cmdline_str.lower() for keyword in ['safetrade', 'telegram', 'bot']):
                        try:
                            proc.kill()
                            killed_count += 1
                            print(f"üî™ –£–±–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å PID {proc.info['pid']}: {cmdline_str[:100]}...")
                        except:
                            try:
                                proc.terminate()
                                killed_count += 1
                                print(f"‚ö° –ó–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å PID {proc.info['pid']}: {cmdline_str[:100]}...")
                            except:
                                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å PID {proc.info['pid']}")
                        
                        time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–±–∏–π—Å—Ç–≤–∞–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                continue
        
        if killed_count > 0:
            print(f"üî™ –í—Å–µ–≥–æ —É–±–∏—Ç–æ/–∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {killed_count}")
            time.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        else:
            print("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except ImportError:
        print("‚ö†Ô∏è psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é —É–±–∏–π—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
    
    # 5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ API Telegram
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = bot.get_me()
        print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞: @{bot_info.username}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        updates = bot.get_updates()
        if updates:
            last_update_id = updates[-1].update_id
            bot.get_updates(offset=last_update_id + 1)
            print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω–æ {len(updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ: {e}")
    
    print("‚úÖ –†–ê–î–ò–ö–ê–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram ---
@bot.message_handler(commands=['start'])
def handle_start(message):
    welcome_text = """
üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏—Ä–∂–µ–π SafeTrade!*
*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚úÖ `/start` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
üí∞ `/balance` - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã.
üìâ `/sell_qtc` - –ü—Ä–æ–¥–∞—Ç—å –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å QTC –∑–∞ USDT.
‚ù§Ô∏è `/donate` - –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞.
"""
    send_long_message(message.chat.id, text=welcome_text, parse_mode='Markdown')

@bot.message_handler(commands=['balance'])
def handle_balance(message):
    bot.send_message(message.chat.id, "üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –±–∞–ª–∞–Ω—Å—ã —Å SafeTrade...")
    balance_info = get_balances_safetrade()
    send_long_message(message.chat.id, balance_info, parse_mode='Markdown')

@bot.message_handler(commands=['cleanup'])
def handle_cleanup(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
    if str(message.chat.id) == str(ADMIN_CHAT_ID):
        bot.send_message(message.chat.id, "üîÑ –ù–∞—á–∏–Ω–∞—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É...")
        force_cleanup_all_instances()
        bot.send_message(message.chat.id, "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
def send_long_message(chat_id, text, **kwargs):
    if not text:
        return
    MAX_MESSAGE_LENGTH = 4000
    if len(text) <= MAX_MESSAGE_LENGTH:
        try:
            bot.send_message(chat_id, text, **kwargs)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    parts = [text[i:i+MAX_MESSAGE_LENGTH] for i in range(0, len(text), MAX_MESSAGE_LENGTH)]
    for part in parts:
        try:
            bot.send_message(chat_id, part, **kwargs)
            time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ---
def signal_handler(sig, frame):
    print(f"\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig}, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
    try:
        bot.stop_polling()
    except:
        pass
    sys.exit(0)

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞ ---
if __name__ == "__main__":
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    if not all([API_KEY, API_SECRET, TELEGRAM_BOT_TOKEN, ADMIN_CHAT_ID]):
        print("[CRITICAL] –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")
        sys.exit(1)
    
    try:
        ADMIN_CHAT_ID = int(ADMIN_CHAT_ID)
        print("üöÄ –ë–æ—Ç SafeTrade –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        print(f"üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π BASE_URL: {BASE_URL}")
        
        # –†–ê–î–ò–ö–ê–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ü–ï–†–ï–î –ó–ê–ü–£–°–ö–û–ú
        force_cleanup_all_instances()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –æ—á–∏—Å—Ç–∫–∏
        time.sleep(2)
        
        start_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        try:
            send_long_message(
                ADMIN_CHAT_ID,
                f"‚úÖ *–ë–æ—Ç SafeTrade —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!*\n\n"
                f"*–í—Ä–µ–º—è:* `{start_time}`\n"
                f"*BASE_URL:* `{BASE_URL}`\n"
                f"*PID:* `{os.getpid()}`\n"
                f"–û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—ã...",
                parse_mode='Markdown'
            )
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (ID: {ADMIN_CHAT_ID})")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
        
        print("üîÑ –ë–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–ø—Ä–æ—Å Telegram API...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º infinity_polling —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        while True:
            try:
                bot.infinity_polling(timeout=20, long_polling_timeout=30)
                break  # –ï—Å–ª–∏ polling –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ infinity_polling: {e}")
                print("üîÑ –ü—ã—Ç–∞—é—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å polling —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                time.sleep(5)
                
                # –ü–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º —Å–Ω–æ–≤–∞ –æ—á–∏—â–∞–µ–º
                force_cleanup_all_instances()
                print("üîÑ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é polling...")
        
    except ValueError:
        print("[CRITICAL] ADMIN_CHAT_ID –≤ .env —Ñ–∞–π–ª–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        sys.exit(1)
    except Exception as e:
        print(f"[ERROR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        if ADMIN_CHAT_ID:
            try:
                send_long_message(ADMIN_CHAT_ID, f"‚ùå *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞!*\n\n`{e}`", parse_mode='Markdown')
            except Exception as notify_err:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {notify_err}")
        sys.exit(1)
    finally:
        print("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞. –û—Ç–∫–ª—é—á–∞—é polling...")
        try:
            bot.stop_polling()
        except:
            pass
        print("‚úÖ Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω.")
