import time
import hmac
import hashlib
import json
import os
import telebot
import threading
from telebot import types
from dotenv import load_dotenv
import cloudscraper
from datetime import datetime

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
load_dotenv()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏ ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_KEY = os.getenv("SAFETRADE_API_KEY")
API_SECRET = os.getenv("SAFETRADE_API_SECRET")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

# URL –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π
DONATE_URL = "https://boosty.to/vokforever/donate"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ API_SECRET –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
API_SECRET_BYTES = API_SECRET.encode('utf-8') if API_SECRET else None
BASE_URL = "https://safe.trade/api/v2"
CURRENCY_TO_SELL = "QTC"
CURRENCY_TO_BUY = "USDT"
MARKET_SYMBOL = f"{CURRENCY_TO_SELL.lower()}{CURRENCY_TO_BUY.lower()}"  # qtcudt

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º QTC –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.
MIN_SELL_AMOUNT = 0.00000001

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∫—Ä–µ–π–ø–µ—Ä–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã Cloudflare
# –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π User-Agent, —á—Ç–æ–±—ã –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
scraper = cloudscraper.create_scraper(
    browser={
        'browser': 'chrome',
        'platform': 'windows',
        'desktop': True
    }
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Telegram. –î–æ–±–∞–≤–ª—è–µ–º parse_mode –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞.
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN, parse_mode='Markdown')

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
menu_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
menu_markup.row('/balance', '/sell_qtc')
menu_markup.row('/history', '/donate')

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram ---
def send_long_message(chat_id, text, **kwargs):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö.
    –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤.
    """
    if not text:
        return

    MAX_MESSAGE_LENGTH = 4000
    if len(text) <= MAX_MESSAGE_LENGTH:
        try:
            bot.send_message(chat_id, text, **kwargs)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return

    lines = text.split('\n')
    current_message_parts = []
    current_length = 0

    for line in lines:
        if current_length + len(line) + 1 > MAX_MESSAGE_LENGTH:
            if current_message_parts:
                try:
                    bot.send_message(chat_id, "\n".join(current_message_parts), **kwargs)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                current_message_parts = []
                current_length = 0
            
            if len(line) > MAX_MESSAGE_LENGTH:
                for i in range(0, len(line), MAX_MESSAGE_LENGTH):
                    chunk = line[i:i + MAX_MESSAGE_LENGTH]
                    try:
                        bot.send_message(chat_id, chunk, **kwargs)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–∏—Ç–æ–≥–æ –∫—É—Å–∫–∞: {e}")
            else:
                current_message_parts.append(line)
                current_length += len(line) + 1
        else:
            current_message_parts.append(line)
            current_length += len(line) + 1

    if current_message_parts:
        try:
            bot.send_message(chat_id, "\n".join(current_message_parts), **kwargs)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# --- –§—É–Ω–∫—Ü–∏–∏ API SafeTrade ---
def generate_signature(nonce, key, secret_bytes):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—å HMAC-SHA256."""
    string_to_sign = nonce + key
    return hmac.new(secret_bytes, string_to_sign.encode('utf-8'), hashlib.sha256).hexdigest()

def get_auth_headers():
    """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    nonce = str(int(time.time() * 1000))
    if not API_KEY or not API_SECRET_BYTES:
        raise ValueError("API Key –∏–ª–∏ API Secret –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
    signature = generate_signature(nonce, API_KEY, API_SECRET_BYTES)
    return {
        'X-Auth-Apikey': API_KEY,
        'X-Auth-Nonce': nonce,
        'X-Auth-Signature': signature,
        'Content-Type': 'application/json'
    }

def get_balances_safetrade():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã."""
    path = "/trade/account/balances/spot"
    url = BASE_URL + path
    try:
        headers = get_auth_headers()
        response = scraper.get(url, headers=headers, timeout=30) # –î–æ–±–∞–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç
        response.raise_for_status()
        balances = response.json()
        if isinstance(balances, list):
            non_zero_balances_lines = [f"{b.get('currency', '').upper()}: `{b.get('balance', '0')}`" for b in balances if float(b.get('balance', 0)) > 0]
            if non_zero_balances_lines:
                return "–í–∞—à–∏ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã –Ω–∞ SafeTrade:\n\n" + "\n".join(non_zero_balances_lines)
            else:
                return "–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤ –Ω–∞ SafeTrade."
        else:
            return f"–û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç SafeTrade: {balances}"
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤ —Å SafeTrade: {e}"
        if hasattr(e, 'response') and e.response is not None:
            response_text_truncated = e.response.text[:1000] + ("..." if len(e.response.text) > 1000 else "")
            error_message += f"\n–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: `{response_text_truncated}`"
        print(error_message) # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        return error_message

def get_current_bid_price(market_symbol):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ª—É—á—à—É—é —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏ (–±–∏–¥)."""
    path = f"/trade/public/tickers/{market_symbol}"
    url = BASE_URL + path
    try:
        response = scraper.get(url, timeout=30)
        response.raise_for_status()
        ticker_data = response.json()
        if isinstance(ticker_data, dict) and 'bid' in ticker_data:
            return float(ticker_data['bid'])
        else:
            print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–∞ –¥–ª—è {market_symbol} –æ—Ç SafeTrade: {ticker_data}")
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –±–∏–¥–∞ –¥–ª—è {market_symbol}: {e}")
        if hasattr(e, 'response') and e.response is not None:
            print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (get_current_bid_price): {e.response.text}")
        return None

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (create_sell_order_safetrade, get_order_info –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ.
# –Ø –∏—Ö —Å–∫—Ä—ã–ª –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏, –Ω–æ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≤–∞—à–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ.
# ... (–≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏ create_sell_order_safetrade, get_order_info, get_order_trades, get_order_history, track_order, auto_sell_qtc) ...

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram ---
@bot.message_handler(commands=['start'])
def handle_start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º."""
    welcome_text = """
üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏—Ä–∂–µ–π SafeTrade!*
–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º –Ω–∞ –±–∏—Ä–∂–µ SafeTrade –ø—Ä—è–º–æ –∏–∑ Telegram.
*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚úÖ `/start` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.
üí∞ `/balance` - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã –Ω–∞ —Å–ø–æ—Ç–æ–≤–æ–º –∫–æ—à–µ–ª—å–∫–µ.
üìâ `/sell_qtc` - –°–æ–∑–¥–∞—Ç—å *–ª–∏–º–∏—Ç–Ω—ã–π* –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É *–≤—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ* –±–∞–ª–∞–Ω—Å–∞ QTC –∑–∞ USDT –ø–æ —Ç–µ–∫—É—â–µ–π —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ (–±–∏–¥).
üìä `/history` - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤.
‚ù§Ô∏è `/donate` - –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ –±–æ—Ç–∞.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º.
"""
    send_long_message(message.chat.id, text=welcome_text, reply_markup=menu_markup)


@bot.message_handler(commands=['balance'])
def handle_balance(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance."""
    bot.send_message(message.chat.id, "üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –±–∞–ª–∞–Ω—Å—ã —Å SafeTrade...")
    balance_info = get_balances_safetrade()
    send_long_message(message.chat.id, balance_info)


@bot.message_handler(commands=['sell_qtc'])
def handle_sell(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sell_qtc."""
    bot.send_message(message.chat.id, f"–ò—â—É `{CURRENCY_TO_SELL}` –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏...")
    try:
        headers = get_auth_headers()
        response = scraper.get(url=BASE_URL + "/trade/account/balances/spot", headers=headers, timeout=30)
        response.raise_for_status()
        balances = response.json()
        qtc_balance = 0.0
        if isinstance(balances, list):
            for balance in balances:
                if balance.get("currency", "").upper() == CURRENCY_TO_SELL:
                    qtc_balance = float(balance.get("balance", 0))
                    break
        
        if qtc_balance > MIN_SELL_AMOUNT:
            send_long_message(message.chat.id, f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ `{qtc_balance}` {CURRENCY_TO_SELL}. –°–æ–∑–¥–∞—é –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ...")
            sell_result = create_sell_order_safetrade(qtc_balance)
            send_long_message(message.chat.id, sell_result)
        else:
            send_long_message(message.chat.id, f"–ë–∞–ª–∞–Ω—Å `{CURRENCY_TO_SELL}` —Ä–∞–≤–µ–Ω `{qtc_balance}`. –ü—Ä–æ–¥–∞–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ –∏–ª–∏ –æ–±—ä–µ–º —Å–ª–∏—à–∫–æ–º –º–∞–ª (–º–∏–Ω. `{MIN_SELL_AMOUNT}`).")
    except Exception as e:
        error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ—Ä–¥–µ—Ä–∞: {e}"
        if hasattr(e, 'response') and e.response is not None:
            response_text_truncated = e.response.text[:1000] + ("..." if len(e.response.text) > 1000 else "")
            error_message += f"\n–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: `{response_text_truncated}`"
        send_long_message(message.chat.id, error_message)


# ... (–≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ /history –∏ /donate) ...


# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞ ---
if __name__ == "__main__":
    if not all([API_KEY, API_SECRET, TELEGRAM_BOT_TOKEN, ADMIN_CHAT_ID]):
        print("[CRITICAL] –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SAFETRADE_API_KEY, SAFETRADE_API_SECRET, TELEGRAM_BOT_TOKEN –∏ ADMIN_CHAT_ID.")
    else:
        try:
            ADMIN_CHAT_ID = int(ADMIN_CHAT_ID)
            print("–ë–æ—Ç SafeTrade –∑–∞–ø—É—â–µ–Ω...")
            
            # –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ 409 Conflict: –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling.
            # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–µ—Å—Å–∏–∏ –Ω–µ –±—É–¥—É—Ç –º–µ—à–∞—Ç—å.
            try:
                print("–£–¥–∞–ª—è—é –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–µ–±—Ö—É–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...")
                bot.delete_webhook()
                time.sleep(1) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
                print("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫. –û—à–∏–±–∫–∞: {e}. –ü—Ä–æ–¥–æ–ª–∂–∞—é –∑–∞–ø—É—Å–∫...")
            
            start_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            send_long_message(
                ADMIN_CHAT_ID,
                f"‚úÖ *–ë–æ—Ç SafeTrade —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!*\n\n*–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:* `{start_time}`\n–û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—ã...",
            )
            print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (Chat ID: {ADMIN_CHAT_ID})")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–¥–∞–∂—É
            print("–ü–ª–∞–Ω–∏—Ä—É—é –ø–µ—Ä–≤—É—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–¥–∞–∂—É QTC —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
            threading.Timer(30, auto_sell_qtc).start()

            print("–ë–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–ø—Ä–æ—Å Telegram API...")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º infinity_polling —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –¥–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
            bot.infinity_polling(timeout=20, long_polling_timeout=30)

        except ValueError:
            print("[CRITICAL] ADMIN_CHAT_ID –≤ .env —Ñ–∞–π–ª–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        except Exception as e:
            print(f"[ERROR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            # –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if ADMIN_CHAT_ID:
                try:
                    send_long_message(ADMIN_CHAT_ID, f"‚ùå *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞!*\n\n`{e}`")
                except Exception as notify_err:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {notify_err}")
