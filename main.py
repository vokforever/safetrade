import time
import hmac
import hashlib
import binascii
import json
import os
import sys
import telebot
import threading
import requests
import psutil
from telebot import types
from dotenv import load_dotenv
import cloudscraper
from datetime import datetime

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
load_dotenv()
API_KEY = os.getenv("SAFETRADE_API_KEY")
API_SECRET = os.getenv("SAFETRADE_API_SECRET")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
DONATE_URL = "https://boosty.to/vokforever/donate"

# –ü–†–ê–í–ò–õ–¨–ù–´–ô –ë–ê–ó–û–í–´–ô URL –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
BASE_URL = "https://safe.trade/api/v2"

CURRENCY_TO_SELL = "QTC"
CURRENCY_TO_BUY = "USDT"
MARKET_SYMBOL = f"{CURRENCY_TO_SELL.lower()}{CURRENCY_TO_BUY.lower()}"
MIN_SELL_AMOUNT = 0.00000001


# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
def create_safetrade_scraper():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–µ–π–ø–µ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    session = requests.Session()
    session.headers.update({
        'Accept': 'application/json',
        'User-Agent': 'SafeTrade-Client/1.0', # –ö–∞–∫ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–µ
    })
    return cloudscraper.create_scraper(sess=session)

scraper = create_safetrade_scraper()
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

menu_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
menu_markup.row('/balance', '/sell_qtc')
menu_markup.row('/history', '/donate')


# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def send_long_message(chat_id, text, **kwargs):
    if not text: return
    MAX_MESSAGE_LENGTH = 4000
    if len(text) <= MAX_MESSAGE_LENGTH:
        try: bot.send_message(chat_id, text, **kwargs)
        except Exception as e: print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return
    parts = [text[i:i+MAX_MESSAGE_LENGTH] for i in range(0, len(text), MAX_MESSAGE_LENGTH)]
    for part in parts:
        try:
            bot.send_message(chat_id, part, **kwargs)
            time.sleep(0.1)
        except Exception as e: print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# --- –§—É–Ω–∫—Ü–∏–∏ API SafeTrade (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É –ø—Ä–∏–º–µ—Ä—É) ---

def generate_signature(nonce, secret, key):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—å —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É –ø—Ä–∏–º–µ—Ä—É."""
    hash_obj = hmac.new(secret.encode(), digestmod=hashlib.sha256)
    hash_obj.update((nonce + key).encode())
    signature = hash_obj.digest()
    return binascii.hexlify(signature).decode()

def get_auth_headers():
    """–°–æ–±–∏—Ä–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    nonce = str(int(time.time() * 1000))
    if not API_KEY or not API_SECRET:
        raise ValueError("API Key –∏–ª–∏ API Secret –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    
    signature = generate_signature(nonce, API_SECRET, API_KEY)
    
    return {
        "X-Auth-Apikey": API_KEY,
        "X-Auth-Nonce": nonce,
        "X-Auth-Signature": signature,
        "Content-Type": "application/json;charset=utf-8"
    }

def get_balances_safetrade():
    """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å—ã —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É API."""
    url = f"{BASE_URL}/trade/account/balances"
    try:
        headers = get_auth_headers()
        response = scraper.get(url, headers=headers, timeout=30)
        response.raise_for_status()
        data = response.json()
        
        if isinstance(data, list):
            non_zero_balances = [f"{b.get('currency', '').upper()}: `{b.get('balance', '0')}`" 
                               for b in data if float(b.get('balance', 0)) > 0]
            if non_zero_balances:
                return "–í–∞—à–∏ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã:\n\n" + "\n".join(non_zero_balances)
            return "–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤."
        return f"–û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {data}"
    except Exception as e:
        error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤: {e}"
        if hasattr(e, 'response'): error_text += f"\n–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ```{e.response.text}```"
        return error_text

def get_current_bid_price(market_symbol):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ª—É—á—à—É—é —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏."""
    url = f"{BASE_URL}/trade/public/tickers/{market_symbol}"
    try:
        response = scraper.get(url, timeout=30)
        response.raise_for_status()
        ticker_data = response.json()
        if isinstance(ticker_data, dict) and 'bid' in ticker_data:
            return float(ticker_data['bid'])
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
        return None

def create_sell_order_safetrade(amount):
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É API."""
    url = f"{BASE_URL}/trade/market/orders"
    
    current_bid_price = get_current_bid_price(MARKET_SYMBOL)
    if current_bid_price is None or current_bid_price <= 0:
        return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è {MARKET_SYMBOL}"
    
    data = {
        "market": MARKET_SYMBOL,
        "side": "sell",
        "amount": str(amount),
        "type": "limit",
        "price": str(current_bid_price)
    }
    
    try:
        headers = get_auth_headers()
        # –î–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º json=data
        response = scraper.post(url, headers=headers, json=data, timeout=30)
        response.raise_for_status()
        order_details = response.json()
        
        if 'id' in order_details:
            return format_order_success(order_details)
        return f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API: {order_details}"
    except Exception as e:
        error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}"
        if hasattr(e, 'response'): error_text += f"\n–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ```{e.response.text}```"
        return error_text

def format_order_success(order_details):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞."""
    return (
        f"‚úÖ *–£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω –æ—Ä–¥–µ—Ä!*\n\n"
        f"*ID –æ—Ä–¥–µ—Ä–∞:* `{order_details.get('id', 'N/A')}`\n"
        f"*–ü–∞—Ä–∞:* `{order_details.get('market', 'N/A').upper()}`\n"
        f"*–°—Ç–æ—Ä–æ–Ω–∞:* `{order_details.get('side', 'N/A').capitalize()}`\n"
        f"*–û–±—ä–µ–º:* `{order_details.get('amount', 'N/A')} {CURRENCY_TO_SELL}`\n"
        f"*–¶–µ–Ω–∞:* `{order_details.get('price', 'N/A')} {CURRENCY_TO_BUY}`\n"
        f"*–°—Ç–∞—Ç—É—Å:* `{order_details.get('state', 'N/A').capitalize()}`"
    )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram ---
@bot.message_handler(commands=['start'])
def handle_start(message):
    send_long_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.", parse_mode='Markdown', reply_markup=menu_markup)

@bot.message_handler(commands=['balance'])
def handle_balance(message):
    bot.send_message(message.chat.id, "üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –±–∞–ª–∞–Ω—Å—ã...")
    balance_info = get_balances_safetrade()
    send_long_message(message.chat.id, balance_info, parse_mode='Markdown')

@bot.message_handler(commands=['sell_qtc'])
def handle_sell_qtc(message):
    bot.send_message(message.chat.id, f"–ò—â—É `{CURRENCY_TO_SELL}` –Ω–∞ –±–∞–ª–∞–Ω—Å–µ...", parse_mode='Markdown')
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ QTC –∏ –≤—ã–∑–æ–≤–∞ create_sell_order_safetrade
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, –ø—Ä–æ–¥–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:
    result = create_sell_order_safetrade("1.0") # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    send_long_message(message.chat.id, result, parse_mode='Markdown')

# ... –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...


# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞ ---
def cleanup_bot_instances():
    """–ù–∞–¥–µ–∂–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º."""
    print("üîÑ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞...")
    try:
        bot.remove_webhook()
        print("‚úÖ –í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω.")
        time.sleep(1)
        updates = bot.get_updates(offset=-1, timeout=1)
        if updates:
            last_update_id = updates[-1].update_id
            bot.get_updates(offset=last_update_id + 1, timeout=1)
            print(f"‚úÖ –û—á–∏—â–µ–Ω–æ {len(updates)} –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.")
        else:
            print("‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ—á–∏—Å—Ç–∫–∏ (—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ): {e}")
    print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

if __name__ == "__main__":
    if not all([API_KEY, API_SECRET, TELEGRAM_BOT_TOKEN, ADMIN_CHAT_ID]):
        print("[CRITICAL] –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        sys.exit(1)
        
    try:
        ADMIN_CHAT_ID = int(ADMIN_CHAT_ID)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        current_pid = os.getpid()
        script_name = os.path.basename(__file__)
        for proc in psutil.process_iter(['pid', 'cmdline']):
            try:
                if proc.info['pid'] != current_pid and proc.info['cmdline'] and len(proc.info['cmdline']) > 1 and 'python' in proc.info['cmdline'][0] and script_name in proc.info['cmdline'][1]:
                    print(f"–û–®–ò–ë–ö–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—Ä—É–≥–æ–π —Ä–∞–±–æ—Ç–∞—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä (PID: {proc.info['pid']}). –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
                    sys.exit(1)
            except (psutil.NoSuchProcess, psutil.AccessDenied, IndexError):
                continue
        
        print("–ë–æ—Ç SafeTrade –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        
        cleanup_bot_instances()
        
        start_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        send_long_message(ADMIN_CHAT_ID, f"‚úÖ *–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!*\n*–í—Ä–µ–º—è:* `{start_time}`", parse_mode='Markdown')
        
        print("–ë–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–ø—Ä–æ—Å Telegram API...")
        bot.infinity_polling(timeout=20, long_polling_timeout=30)
        
    except ValueError:
        print("[CRITICAL] ADMIN_CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    except Exception as e:
        print(f"[ERROR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
        if 'bot' in locals() and bot is not None:
            bot.stop_polling()
