import time
import hmac
import hashlib
import json
import os
import telebot
from telebot import types
from dotenv import load_dotenv
import cloudscraper
from datetime import datetime
import threading

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
load_dotenv()
# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏ ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_KEY = os.getenv("SAFETRADE_API_KEY")
API_SECRET = os.getenv("SAFETRADE_API_SECRET")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# URL –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π
DONATE_URL = "https://boosty.to/vokforever/donate"

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–µ–∫—Ä–µ—Ç –≤ –±–∞–π—Ç–æ–≤–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –¥–ª—è hmac
API_SECRET_BYTES = API_SECRET.encode('utf-8') if API_SECRET else None
BASE_URL = "https://safe.trade/api/v2"
CURRENCY_TO_SELL = "QTC"
CURRENCY_TO_BUY = "USDT"
MARKET_SYMBOL = f"{CURRENCY_TO_SELL.lower()}{CURRENCY_TO_BUY.lower()}"

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∫—Ä–µ–π–ø–µ—Ä–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã Cloudflare
scraper = cloudscraper.create_scraper()
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Telegram
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
menu_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
menu_markup.row('/balance', '/sell_qtc')
menu_markup.row('/history', '/donate')


# --- –§—É–Ω–∫—Ü–∏–∏ API SafeTrade ---
def generate_signature(nonce, key, secret_bytes):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—å HMAC-SHA256."""
    string_to_sign = nonce + key
    return hmac.new(secret_bytes, string_to_sign.encode('utf-8'), hashlib.sha256).hexdigest()


def get_auth_headers():
    """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    nonce = str(int(time.time() * 1000))
    signature = generate_signature(nonce, API_KEY, API_SECRET_BYTES)
    return {
        'X-Auth-Apikey': API_KEY,
        'X-Auth-Nonce': nonce,
        'X-Auth-Signature': signature,
        'Content-Type': 'application/json'
    }


def get_balances_safetrade():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã."""
    path = "/trade/account/balances/spot"
    url = BASE_URL + path
    try:
        headers = get_auth_headers()
        response = scraper.get(url, headers=headers)
        response.raise_for_status()
        balances = response.json()
        if isinstance(balances, list):
            non_zero_balances = [
                f"{b.get('currency', '').upper()}: `{b.get('balance', '0')}`"
                for b in balances if float(b.get('balance', 0)) > 0
            ]
            if non_zero_balances:
                return "–í–∞—à–∏ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã –Ω–∞ SafeTrade:\n\n" + "\n".join(non_zero_balances)
            else:
                return "–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤ –Ω–∞ SafeTrade."
        else:
            return f"–û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç SafeTrade: {balances}"
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤ —Å SafeTrade: {e}"
        if hasattr(e, 'response') and e.response is not None:
            error_message += f"\n–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}"
        return error_message


def create_sell_order_safetrade(amount):
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    path = "/trade/market/orders"
    url = BASE_URL + path
    payload = {
        "market": MARKET_SYMBOL,
        "side": "sell",
        "type": "market",
        "amount": str(amount)
    }
    try:
        headers = get_auth_headers()
        response = scraper.post(url, headers=headers, json=payload)
        response.raise_for_status()
        order_details = response.json()

        order_id = order_details.get('id')
        order_amount = order_details.get('amount', amount)

        if order_id:
            threading.Thread(target=track_order, args=(order_id,)).start()

        return (
            f"‚úÖ *–£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É!*\n\n"
            f"*–ë–∏—Ä–∂–∞:* SafeTrade\n"
            f"*–ü–∞—Ä–∞:* `{order_details.get('market', 'N/A').upper()}`\n"
            f"*–¢–∏–ø:* `{order_details.get('type', 'N/A').capitalize()}`\n"
            f"*–°—Ç–æ—Ä–æ–Ω–∞:* `{order_details.get('side', 'N/A').capitalize()}`\n"
            f"*–ó–∞—è–≤–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–º:* `{order_amount} {CURRENCY_TO_SELL}`\n"
            f"*ID –æ—Ä–¥–µ—Ä–∞:* `{order_id}`"
        )
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –Ω–∞ SafeTrade: {e}"
        if hasattr(e, 'response') and e.response is not None:
            error_message += f"\n–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: `{e.response.text}`"
        return error_message


def get_order_info(order_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –æ—Ä–¥–µ—Ä–µ."""
    path = f"/trade/market/orders/{order_id}"
    url = BASE_URL + path
    try:
        headers = get_auth_headers()
        response = scraper.get(url, headers=headers)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ä–¥–µ—Ä–µ {order_id}: {e}")
        return None


def get_order_trades(order_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–¥–µ–ª–∫–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ—Ä–¥–µ—Ä—É, —Ñ–∏–ª—å—Ç—Ä—É—è –æ–±—â—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫."""
    path = "/trade/market/trades"  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
    url = BASE_URL + path
    try:
        headers = get_auth_headers()
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ ID –æ—Ä–¥–µ—Ä–∞
        params = {"order_id": str(order_id)}
        response = scraper.get(url, headers=headers, params=params)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–¥–µ–ª–æ–∫ –ø–æ –æ—Ä–¥–µ—Ä—É {order_id}: {e}")
        return []


def get_order_history(limit=10):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤ —Å –±–∏—Ä–∂–∏."""
    path = "/trade/market/orders"
    url = BASE_URL + path
    try:
        headers = get_auth_headers()
        params = {"market": MARKET_SYMBOL, "limit": limit, "state": "done"}
        response = scraper.get(url, headers=headers, params=params)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤: {e}")
        return []


def track_order(order_id):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –µ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏."""
    max_attempts = 30
    check_interval = 10

    for _ in range(max_attempts):
        time.sleep(check_interval)
        order_info = get_order_info(order_id)

        if not order_info:
            continue

        if order_info.get('state') == 'done':
            trades = get_order_trades(order_id)
            if trades:
                total_amount = sum(float(trade.get('amount', 0)) for trade in trades)
                total_sum = sum(float(trade.get('total', 0)) for trade in trades)
                avg_price = total_sum / total_amount if total_amount > 0 else 0
                executed_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

                message = (
                    f"‚úÖ *–û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω!*\n\n"
                    f"*ID –æ—Ä–¥–µ—Ä–∞:* `{order_id}`\n"
                    f"*–ü–∞—Ä–∞:* `{MARKET_SYMBOL.upper()}`\n"
                    f"*–ü—Ä–æ–¥–∞–Ω–æ:* `{total_amount:.8f} {CURRENCY_TO_SELL}`\n"
                    f"*–ü–æ–ª—É—á–µ–Ω–æ:* `{total_sum:.8f} {CURRENCY_TO_BUY}`\n"
                    f"*–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞:* `{avg_price:.8f} {CURRENCY_TO_BUY}`\n"
                    f"*–í—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:* `{executed_time}`"
                )

                try:
                    bot.send_message(ADMIN_CHAT_ID, message, parse_mode='Markdown')
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                return
        elif order_info.get('state') == 'cancel':
            return
    print(f"–ü—Ä–µ–∫—Ä–∞—â–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ {order_id} –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram ---
@bot.message_handler(commands=['start'])
def handle_start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º."""
    welcome_text = """
üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏—Ä–∂–µ–π SafeTrade!*
–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º –Ω–∞ –±–∏—Ä–∂–µ SafeTrade –ø—Ä—è–º–æ –∏–∑ Telegram.
*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚úÖ `/start` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.
üí∞ `/balance` - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã –Ω–∞ —Å–ø–æ—Ç–æ–≤–æ–º –∫–æ—à–µ–ª—å–∫–µ.
üìâ `/sell_qtc` - –°–æ–∑–¥–∞—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É *–≤—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ* –±–∞–ª–∞–Ω—Å–∞ QTC –∑–∞ USDT.
üìä `/history` - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤.
‚ù§Ô∏è `/donate` - –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ –±–æ—Ç–∞.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º.
"""
    bot.send_message(
        message.chat.id,
        text=welcome_text,
        parse_mode='Markdown',
        reply_markup=menu_markup
    )


@bot.message_handler(commands=['balance'])
def handle_balance(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance."""
    bot.send_message(message.chat.id, "üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –±–∞–ª–∞–Ω—Å—ã —Å SafeTrade...")
    balance_info = get_balances_safetrade()
    bot.send_message(message.chat.id, balance_info, parse_mode='Markdown')


@bot.message_handler(commands=['sell_qtc'])
def handle_sell(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sell_qtc."""
    bot.send_message(message.chat.id, f"–ò—â—É `{CURRENCY_TO_SELL}` –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏...", parse_mode='Markdown')
    try:
        headers = get_auth_headers()
        response = scraper.get(BASE_URL + "/trade/account/balances/spot", headers=headers)
        response.raise_for_status()
        balances = response.json()
        qtc_balance = 0.0
        if isinstance(balances, list):
            for balance in balances:
                if balance.get("currency", "").upper() == CURRENCY_TO_SELL:
                    qtc_balance = float(balance.get("balance", 0))
                    break
        if qtc_balance > 0:
            bot.send_message(message.chat.id,
                             f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ `{qtc_balance}` {CURRENCY_TO_SELL}. –°–æ–∑–¥–∞—é –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É...",
                             parse_mode='Markdown')
            sell_result = create_sell_order_safetrade(qtc_balance)
            bot.send_message(message.chat.id, sell_result, parse_mode='Markdown')
        else:
            bot.send_message(message.chat.id, f"–ë–∞–ª–∞–Ω—Å `{CURRENCY_TO_SELL}` —Ä–∞–≤–µ–Ω 0. –ü—Ä–æ–¥–∞–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ.",
                             parse_mode='Markdown')
    except Exception as e:
        error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ—Ä–¥–µ—Ä–∞: {e}"
        if hasattr(e, 'response') and e.response is not None:
            error_message += f"\n–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}"
        bot.send_message(message.chat.id, error_message)


@bot.message_handler(commands=['history'])
def handle_history(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤."""
    bot.send_message(message.chat.id, "üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤ —Å SafeTrade...")

    orders = get_order_history(limit=10)

    if orders and isinstance(orders, list) and len(orders) > 0:
        history_text = "üìä *–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤:*\n\n"
        for order in orders:
            order_id = order.get('id', 'N/A')
            created_at = order.get('created_at', 'N/A')

            try:
                dt = datetime.strptime(created_at, "%Y-%m-%dT%H:%M:%S.%fZ")
                formatted_time = dt.strftime("%Y-%m-%d %H:%M:%S")
            except:
                formatted_time = created_at

            amount_str = f"`{order.get('amount', 'N/A')}`"
            price_str = f"`{order.get('price', 'N/A')}`"
            total_str = f"`{order.get('total', 'N/A')}`"

            if order.get('state') == 'done':
                trades = get_order_trades(order_id)
                if trades and isinstance(trades, list) and len(trades) > 0:
                    total_amount = sum(float(trade.get('amount', 0)) for trade in trades)
                    total_sum = sum(float(trade.get('total', 0)) for trade in trades)
                    avg_price = total_sum / total_amount if total_amount > 0 else 0

                    amount_str = f"`{total_amount:.8f}`"
                    price_str = f"`{avg_price:.8f}` (—Å—Ä–µ–¥–Ω—è—è)"
                    total_str = f"`{total_sum:.8f}`"

            history_text += (
                f"*ID –æ—Ä–¥–µ—Ä–∞:* `{order_id}`\n"
                f"*–ü–∞—Ä–∞:* `{order.get('market', 'N/A').upper()}`\n"
                f"*–¢–∏–ø:* `{order.get('type', 'N/A').capitalize()}`\n"
                f"*–°—Ç–æ—Ä–æ–Ω–∞:* `{order.get('side', 'N/A').capitalize()}`\n"
                f"*–û–±—ä–µ–º:* {amount_str} {CURRENCY_TO_SELL}\n"
                f"*–¶–µ–Ω–∞:* {price_str} {CURRENCY_TO_BUY}\n"
                f"*–°—É–º–º–∞:* {total_str} {CURRENCY_TO_BUY}\n"
                f"*–°—Ç–∞—Ç—É—Å:* `{order.get('state', 'N/A').capitalize()}`\n"
                f"*–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:* `{formatted_time}`\n\n"
            )

        bot.send_message(message.chat.id, history_text, parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞.")


@bot.message_handler(commands=['donate'])
def handle_donate(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /donate."""
    donate_markup = types.InlineKeyboardMarkup()
    donate_button = types.InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ ‚ù§Ô∏è", url=DONATE_URL)
    donate_markup.add(donate_button)
    bot.send_message(
        message.chat.id,
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ. –°–ø–∞—Å–∏–±–æ!",
        reply_markup=donate_markup
    )


# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞ ---
if __name__ == "__main__":
    if not all([API_KEY, API_SECRET, TELEGRAM_BOT_TOKEN, ADMIN_CHAT_ID]):
        print(
            "[CRITICAL] –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SAFETRADE_API_KEY, SAFETRADE_API_SECRET, TELEGRAM_BOT_TOKEN –∏ ADMIN_CHAT_ID –≤ —Ñ–∞–π–ª–µ .env")
    else:
        print("–ë–æ—Ç SafeTrade –∑–∞–ø—É—â–µ–Ω...")
        try:
            start_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            bot.send_message(
                ADMIN_CHAT_ID,
                f"‚úÖ *–ë–æ—Ç SafeTrade —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!*\n\n*–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:* `{start_time}`\n–û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—ã...",
                parse_mode='Markdown'
            )
            print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (Chat ID: {ADMIN_CHAT_ID})")
        except Exception as e:
            print(f"[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û—à–∏–±–∫–∞: {e}")
        bot.infinity_polling()