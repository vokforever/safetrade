# –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ñ–∞–π–ª requirements.txt —Å —Ç–∞–∫–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:
#
# aiogram==3.10.0
# requests==2.32.3
# cloudscraper==1.2.71
# python-dotenv==1.0.1
# apscheduler==3.10.4
#

import asyncio
import logging
import time
import hmac
import hashlib
import binascii
import json
import os
import sys
from datetime import datetime
from contextlib import suppress

import requests
import cloudscraper
from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramAPIError, TelegramRetryAfter
from aiogram.client.bot import DefaultBotProperties
from dotenv import load_dotenv

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger

# --- 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

load_dotenv()
API_KEY = os.getenv("SAFETRADE_API_KEY")
API_SECRET = os.getenv("SAFETRADE_API_SECRET")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

SELL_INTERVAL_HOURS = float(os.getenv("SELL_INTERVAL_HOURS", "1"))
BASE_URL = "https://safe.trade/api/v2"
CURRENCY_TO_SELL = "QTC"
CURRENCY_TO_BUY = "USDT"
MARKET_SYMBOL = f"{CURRENCY_TO_SELL.lower()}{CURRENCY_TO_BUY.lower()}"
MIN_SELL_AMOUNT = 0.00000001

# --- 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()
dp.include_router(router)
scheduler = AsyncIOScheduler()

# --- 3. –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API SafeTrade ---
class SafeTradeClient:
    def __init__(self):
        self.scraper = None
        self.base_url = BASE_URL

    async def init(self):
        if self.scraper is not None:
            return
        session = requests.Session()
        session.headers.update({
            'Content-Type': 'application/json;charset=utf-8', 'Accept': 'application/json',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        self.scraper = cloudscraper.create_scraper(sess=session)
        try:
            logger.info("üîÑ –ü—Ä–æ–≥—Ä–µ–≤–∞—é —Å–µ—Å—Å–∏—é –¥–ª—è –æ–±—Ö–æ–¥–∞ Cloudflare...")
            await asyncio.to_thread(self.scraper.get, "https://safe.trade", timeout=30)
            logger.info("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≥—Ä–µ—Ç–∞.")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            self.scraper = None

    async def close(self):
        if self.scraper and hasattr(self.scraper, 'close'):
            self.scraper.close()

    def get_auth_headers(self) -> dict:
        nonce = str(int(time.time() * 1000))
        if not API_KEY or not API_SECRET: raise ValueError("API Key/Secret –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        hash_obj = hmac.new(API_SECRET.encode(), (nonce + API_KEY).encode(), hashlib.sha256)
        signature = binascii.hexlify(hash_obj.digest()).decode()
        return {"X-Auth-Apikey": API_KEY, "X-Auth-Nonce": nonce, "X-Auth-Signature": signature}

    async def _get_raw_balances(self) -> list | None:
        await self.init()
        if not self.scraper: return None
        for endpoint in [f"{self.base_url}/trade/account/balances", f"{self.base_url}/peatio/account/balances"]:
            try:
                response = await asyncio.to_thread(self.scraper.get, endpoint, headers=self.get_auth_headers(), timeout=30)
                if response.status_code == 200: return response.json()
            except Exception as e: logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–∞–ª–∞–Ω—Å–æ–≤ –∫ {endpoint}: {e}")
        return None

    async def get_balances_string(self) -> str:
        raw_balances = await self._get_raw_balances()
        if raw_balances is None: return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã."
        balances = [f"{b['currency'].upper()}: <code>{b['balance']}</code>" for b in raw_balances if float(b.get('balance', 0)) > 0]
        return "–í–∞—à–∏ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã:\n\n" + "\n".join(balances) if balances else "–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤."

    async def get_specific_balance(self, currency: str) -> float | None:
        raw_balances = await self._get_raw_balances()
        if raw_balances:
            for item in raw_balances:
                if item.get('currency', '').lower() == currency.lower(): return float(item.get('balance', 0.0))
        return None

    # –ù–û–í–´–ô –ú–ï–¢–û–î: –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
    async def get_order_status(self, order_id: int) -> dict | None:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –æ—Ä–¥–µ—Ä–µ –ø–æ –µ–≥–æ ID."""
        await self.init()
        if not self.scraper: return None
        try:
            url = f"{self.base_url}/trade/market/orders/{order_id}"
            response = await asyncio.to_thread(self.scraper.get, url, headers=self.get_auth_headers(), timeout=30)
            if response.status_code == 200:
                return response.json()
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ {order_id}: {response.status_code}")
                return None
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ {order_id}: {e}")
            return None

    # –ò–ó–ú–ï–ù–ï–ù–ù–´–ô –ú–ï–¢–û–î: —Ç–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ—Ç MARKET –æ—Ä–¥–µ—Ä
    async def create_market_sell_order(self, amount: float) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–π (market) –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É."""
        await self.init()
        if not self.scraper: return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä: –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω."
        
        # –î–ª—è —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –Ω–µ –Ω—É–∂–Ω–∞ —Ü–µ–Ω–∞, —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–º
        data = {"market": MARKET_SYMBOL, "side": "sell", "amount": str(amount), "type": "market"}
        
        try:
            logger.info(f"üîÑ –°–æ–∑–¥–∞—é MARKET –æ—Ä–¥–µ—Ä: {data}")
            response = await asyncio.to_thread(self.scraper.post, f"{self.base_url}/trade/market/orders", headers=self.get_auth_headers(), json=data, timeout=30)
            
            if response.status_code in [200, 201]:
                order_details = response.json()
                logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {order_details}")
                if 'id' in order_details:
                    # –ù–û–í–û–ï: –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
                    asyncio.create_task(self.track_order_execution(order_details['id']))
                    return self.format_order_creation_success(order_details)
                return f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: <code>{str(order_details)[:200]}</code>"
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: —Å—Ç–∞—Ç—É—Å {response.status_code}. –û—Ç–≤–µ—Ç: <code>{response.text[:200]}</code>"
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}", exc_info=True)
            return f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: <code>{str(e)[:200]}</code>"

    # –ù–û–í–´–ô –ú–ï–¢–û–î: —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    async def track_order_execution(self, order_id: int):
        logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ {order_id}...")
        max_attempts = 60  # ~10 –º–∏–Ω—É—Ç (60 –ø–æ–ø—ã—Ç–æ–∫ * 10 —Å–µ–∫—É–Ω–¥)
        
        for attempt in range(max_attempts):
            await asyncio.sleep(10) # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            
            order_info = await self.get_order_status(order_id)
            if not order_info: continue

            state = order_info.get('state')
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_attempts}: –û—Ä–¥–µ—Ä {order_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ '{state}'")

            if state == 'done':
                filled_amount = order_info.get('executed_volume', 'N/A')
                avg_price = order_info.get('avg_price', 'N/A')
                message = (f"‚úÖ <b>–û—Ä–¥–µ—Ä #{order_id} –∏—Å–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
                           f"<b>–ü—Ä–æ–¥–∞–Ω–æ:</b> <code>{filled_amount} {CURRENCY_TO_SELL}</code>\n"
                           f"<b>–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞:</b> <code>{avg_price} {CURRENCY_TO_BUY}</code>")
                await bot.send_message(ADMIN_CHAT_ID, message)
                return # –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞

            if state in ['cancel', 'reject']:
                message = f"‚ùå <b>–û—Ä–¥–µ—Ä #{order_id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω.</b>"
                await bot.send_message(ADMIN_CHAT_ID, message)
                return # –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞

        logger.warning(f"–ü—Ä–µ–∫—Ä–∞—â–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ {order_id} –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫. –°—Ç–∞—Ç—É—Å –æ—Å—Ç–∞–ª—Å—è –Ω–µ 'done'.")
        await bot.send_message(ADMIN_CHAT_ID, f"‚ö†Ô∏è –û—Ä–¥–µ—Ä #{order_id} –Ω–µ –±—ã–ª –∏—Å–ø–æ–ª–Ω–µ–Ω –∑–∞ 10 –º–∏–Ω—É—Ç.")

    def format_order_creation_success(self, order: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –°–û–ó–î–ê–ù–ò–ò –æ—Ä–¥–µ—Ä–∞."""
        return (f"‚úÖ <b>–†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                f"<b>–ü–∞—Ä–∞:</b> <code>{order.get('market', 'N/A').upper()}</code>\n"
                f"<b>–ó–∞—è–≤–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–º:</b> <code>{order.get('amount', 'N/A')} {CURRENCY_TO_SELL}</code>\n"
                f"<b>ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:</b> <code>{order.get('id', 'N/A')}</code>\n\n"
                f"‚è≥ –û–∂–∏–¥–∞—é –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è...")

safetrade_client = SafeTradeClient()

# --- 4. –ó–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–¥–∞–∂–∏ ---
async def scheduled_sell_task():
    logger.info(f"--- üóìÔ∏è –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–¥–∞–∂–∏ {CURRENCY_TO_SELL} ---")
    try:
        balance = await safetrade_client.get_specific_balance(CURRENCY_TO_SELL)
        if balance is None or balance <= MIN_SELL_AMOUNT:
            logger.info(f"üóìÔ∏è –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –±–∞–ª–∞–Ω—Å ({balance or 0}) –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω.")
            return

        logger.info(f"üóìÔ∏è –ë–∞–ª–∞–Ω—Å {balance} {CURRENCY_TO_SELL} –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω. –°–æ–∑–¥–∞—é —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä...")
        result_message = await safetrade_client.create_market_sell_order(balance)
        await bot.send_message(ADMIN_CHAT_ID, "üìà <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–¥–∞–∂–∞:</b>\n\n" + result_message)
    except Exception as e:
        logger.error(f"üóìÔ∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –∑–∞–¥–∞—á–µ –∞–≤—Ç–æ-–ø—Ä–æ–¥–∞–∂–∏: {e}", exc_info=True)
        await bot.send_message(ADMIN_CHAT_ID, f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –∞–≤—Ç–æ-–ø—Ä–æ–¥–∞–∂–∏:</b>\n<code>{str(e)}</code>")

# --- 5. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram ---
@router.message(CommandStart())
async def handle_start(message: Message):
    await message.answer(
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "üí∞ <code>/balance</code> - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã\n"
        f"üìâ <code>/sell_qtc</code> - –ü—Ä–æ–¥–∞—Ç—å –≤–µ—Å—å {CURRENCY_TO_SELL} –ø–æ —Ä—ã–Ω–∫—É\n"
        "‚ù§Ô∏è <code>/donate</code> - –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞"
    )

@router.message(Command("balance"))
async def handle_balance(message: Message):
    await message.answer("üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –±–∞–ª–∞–Ω—Å—ã...")
    balance_info = await safetrade_client.get_balances_string()
    await message.answer(balance_info)

@router.message(Command("sell_qtc"))
async def handle_sell_qtc(message: Message):
    await message.answer(f"üîç –ò–Ω–∏—Ü–∏–∏—Ä—É—é –ø—Ä–æ–¥–∞–∂—É {CURRENCY_TO_SELL} –ø–æ —Ä—ã–Ω–∫—É...")
    balance = await safetrade_client.get_specific_balance(CURRENCY_TO_SELL)

    if balance is None or balance <= MIN_SELL_AMOUNT:
        await message.answer(f"‚ÑπÔ∏è –í–∞—à –±–∞–ª–∞–Ω—Å {CURRENCY_TO_SELL} ({balance or 0}) —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.")
        return

    # –ò–ó–ú–ï–ù–ï–ù–û: –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
    result = await safetrade_client.create_market_sell_order(balance)
    await message.answer(result)

@router.message(Command("donate"))
async def handle_donate(message: Message):
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å ‚ù§Ô∏è", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞", url="https://boosty.to/vokforever/donate")]]
    ))

# --- 6. –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –±–æ—Ç–∞ ---
async def on_startup(dispatcher: Dispatcher):
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await bot.delete_webhook(drop_pending_updates=True)
    if SELL_INTERVAL_HOURS > 0:
        scheduler.add_job(scheduled_sell_task, IntervalTrigger(hours=SELL_INTERVAL_HOURS), name='Auto-Sell Task')
        scheduler.start()
        logger.info(f"‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω: –∞–≤—Ç–æ-–ø—Ä–æ–¥–∞–∂–∞ –∫–∞–∂–¥—ã–µ {SELL_INTERVAL_HOURS} —á–∞—Å(–∞).")
    else:
        logger.info("‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–¥–∞–∂–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    await bot.send_message(ADMIN_CHAT_ID, "‚úÖ <b>–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!</b>")

async def on_shutdown(dispatcher: Dispatcher):
    logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    if scheduler.running: scheduler.shutdown()
    await safetrade_client.close()
    await bot.session.close()
    logger.info("‚úÖ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    try:
        await dp.start_polling(bot)
    finally:
        await on_shutdown(dp)

if __name__ == "__main__":
    if not all([API_KEY, API_SECRET, TELEGRAM_BOT_TOKEN, ADMIN_CHAT_ID]):
        logger.critical("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        sys.exit(1)
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
