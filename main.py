import asyncio
import logging
import time
import hmac
import hashlib
import binascii
import json
import os
import sys
import re
from datetime import datetime
from contextlib import suppress

import aiohttp
import cloudscraper
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramAPIError, TelegramRetryAfter
from aiogram.client.bot import DefaultBotProperties

from dotenv import load_dotenv

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
API_KEY = os.getenv("SAFETRADE_API_KEY")
API_SECRET = os.getenv("SAFETRADE_API_SECRET")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
WEBHOOK_URL = os.getenv("WEBHOOK_URL") # –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BASE_URL = "https://safe.trade/api/v2"
CURRENCY_TO_SELL = "QTC"
CURRENCY_TO_BUY = "USDT"
MARKET_SYMBOL = f"{CURRENCY_TO_SELL.lower()}{CURRENCY_TO_BUY.lower()}"
MIN_SELL_AMOUNT = 0.00000001

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def is_html_response(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π"""
    html_patterns = [
        r'<!DOCTYPE html>', r'<html', r'<head>', r'<body',
        r'Cloudflare', r'Attention Required!', r'jschallenge'
    ]
    return any(re.search(pattern, text, re.IGNORECASE) for pattern in html_patterns)

def sanitize_for_telegram(text: str) -> str:
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
    if not text:
        return "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"
    
    if is_html_response(text):
        return "‚ùå –ü–æ–ª—É—á–µ–Ω HTML –æ—Ç–≤–µ—Ç –≤–º–µ—Å—Ç–æ JSON. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å Cloudflare –∏–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
    
    text = re.sub(r'[<>]', '', text)
    if len(text) > 4000:
        text = text[:3997] + "..."
    return text

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP –∫–ª–∏–µ–Ω—Ç–∞ ---
class SafeTradeClient:
    def __init__(self):
        self.session = None
        # cloudscraper –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        self.scraper = cloudscraper.create_scraper(
            browser={'browser': 'chrome', 'platform': 'windows', 'desktop': True}
        )
    
    async def init(self):
        if self.session is None or self.session.closed:
            self.session = aiohttp.ClientSession(
                timeout=aiohttp.ClientTimeout(total=30),
                headers={
                    'Accept': 'application/json',
                    'User-Agent': 'SafeTrade-Client/1.0',
                }
            )
    
    async def close(self):
        if self.session:
            await self.session.close()
            self.session = None
    
    def generate_signature(self, nonce: str, secret: str, key: str) -> str:
        hash_obj = hmac.new(secret.encode(), digestmod=hashlib.sha256)
        hash_obj.update((nonce + key).encode())
        return binascii.hexlify(hash_obj.digest()).decode()
    
    def get_auth_headers(self) -> dict:
        nonce = str(int(time.time() * 1000))
        if not API_KEY or not API_SECRET:
            raise ValueError("API Key –∏–ª–∏ API Secret –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        
        signature = self.generate_signature(nonce, API_SECRET, API_KEY)
        
        return {
            "X-Auth-Apikey": API_KEY,
            "X-Auth-Nonce": nonce,
            "X-Auth-Signature": signature,
            "Content-Type": "application/json;charset=utf-8"
        }
    
    async def get_balances(self) -> str:
        await self.init()
        url = f"{BASE_URL}/trade/account/balances"
        
        try:
            headers = self.get_auth_headers()
            async with self.session.get(url, headers=headers) as response:
                logger.info(f"üì° –û—Ç–≤–µ—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–æ–≤: —Å—Ç–∞—Ç—É—Å {response.status}")
                
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç (–±–∞–ª–∞–Ω—Å—ã): {data}")
                    
                    if isinstance(data, list):
                        non_zero_balances = [
                            f"{b.get('currency', '').upper()}: <code>{b.get('balance', '0')}</code>"
                            for b in data if float(b.get('balance', 0)) > 0
                        ]
                        if non_zero_balances:
                            return "–í–∞—à–∏ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã –Ω–∞ SafeTrade:\n\n" + "\n".join(non_zero_balances)
                        return "–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤ –Ω–∞ SafeTrade."
                    return f"–û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: <code>{str(data)[:200]}</code>"
                else:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ API (–±–∞–ª–∞–Ω—Å—ã): —Å—Ç–∞—Ç—É—Å {response.status}, –æ—Ç–≤–µ—Ç: {error_text[:500]}")
                    if is_html_response(error_text):
                        return "‚ùå –î–æ—Å—Ç—É–ø –∫ API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (Cloudflare). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    return f"‚ùå –û—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å {response.status} - <code>{sanitize_for_telegram(error_text[:200])}</code>"
                    
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤: {e}", exc_info=True)
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤: <code>{sanitize_for_telegram(str(e))}</code>"
    
    async def get_current_bid_price(self, market_symbol: str) -> float | None:
        await self.init()
        url = f"{BASE_URL}/trade/public/tickers/{market_symbol}"
        
        try:
            async with self.session.get(url) as response:
                if response.status == 200:
                    ticker_data = await response.json()
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞: {ticker_data}")
                    if isinstance(ticker_data, dict) and 'bid' in ticker_data:
                        return float(ticker_data['bid'])
                return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}", exc_info=True)
            return None
    
    async def create_sell_order(self, amount: float) -> str:
        await self.init()
        url = f"{BASE_URL}/trade/market/orders"
        
        current_bid_price = await self.get_current_bid_price(MARKET_SYMBOL)
        if not current_bid_price or current_bid_price <= 0:
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è {MARKET_SYMBOL}"
        
        data = {
            "market": MARKET_SYMBOL,
            "side": "sell",
            "amount": str(amount),
            "type": "limit",
            "price": str(current_bid_price)
        }
        
        try:
            headers = self.get_auth_headers()
            logger.info(f"üîÑ –°–æ–∑–¥–∞—é –æ—Ä–¥–µ—Ä: {data}")
            
            async with self.session.post(url, headers=headers, json=data) as response:
                logger.info(f"üì° –û—Ç–≤–µ—Ç –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: —Å—Ç–∞—Ç—É—Å {response.status}")
                
                if response.status == 201: # –û–±—ã—á–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 201 Created
                    order_details = await response.json()
                    logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {order_details}")
                    if 'id' in order_details:
                        # asyncio.create_task(self.track_order(order_details['id']))
                        return self.format_order_success(order_details)
                    return f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: <code>{sanitize_for_telegram(str(order_details)[:200])}</code>"
                else:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: —Å—Ç–∞—Ç—É—Å {response.status}, –æ—Ç–≤–µ—Ç: {error_text[:500]}")
                    if is_html_response(error_text):
                        return "‚ùå –î–æ—Å—Ç—É–ø –∫ API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (Cloudflare). –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä."
                    return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: —Å—Ç–∞—Ç—É—Å {response.status} - <code>{sanitize_for_telegram(error_text[:200])}</code>"
                    
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}", exc_info=True)
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: <code>{sanitize_for_telegram(str(e))}</code>"
    
    def format_order_success(self, order_details: dict) -> str:
        return (
            f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É!</b>\n\n"
            f"<b>ID –æ—Ä–¥–µ—Ä–∞:</b> <code>{order_details.get('id', 'N/A')}</code>\n"
            f"<b>–ü–∞—Ä–∞:</b> <code>{order_details.get('market', 'N/A').upper()}</code>\n"
            f"<b>–û–±—ä–µ–º:</b> <code>{order_details.get('amount', 'N/A')} {CURRENCY_TO_SELL}</code>\n"
            f"<b>–¶–µ–Ω–∞:</b> <code>{order_details.get('price', 'N/A')} {CURRENCY_TO_BUY}</code>"
        )
    
    # –§—É–Ω–∫—Ü–∏–∏ track_order –∏ send_safe_message –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
safetrade_client = SafeTradeClient()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@router.message(CommandStart())
async def handle_start(message: Message):
    welcome_text = """
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏—Ä–∂–µ–π SafeTrade!</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
/balance - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã.
/sell_qtc - –ü—Ä–æ–¥–∞—Ç—å –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å QTC.
/donate - –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞.
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞.
"""
    await message.answer(welcome_text)

@router.message(Command("balance"))
async def handle_balance(message: Message):
    await message.answer("üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –±–∞–ª–∞–Ω—Å—ã —Å SafeTrade...")
    balance_info = await safetrade_client.get_balances()
    await message.answer(balance_info)

@router.message(Command("sell_qtc"))
async def handle_sell(message: Message):
    await message.answer(f"–ò—â—É <code>{CURRENCY_TO_SELL}</code> –Ω–∞ –±–∞–ª–∞–Ω—Å–µ...")
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ –≤ create_sell_order
    # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–¥–∞–∂–∏ 1 QTC
    result = await safetrade_client.create_sell_order(1.0)
    await message.answer(result)

@router.message(Command("donate"))
async def handle_donate(message: Message):
    donate_url = "https://boosty.to/vokforever/donate"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ ‚ù§Ô∏è", url=donate_url)]
    ])
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É!", reply_markup=keyboard)

@router.message(Command("status"))
async def handle_status(message: Message):
    await message.answer(f"ü§ñ <b>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.</b>\n–í–µ—Ä—Å–∏—è API: <code>{BASE_URL}</code>")

# --- –§—É–Ω–∫—Ü–∏–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ ---
async def on_startup(dispatcher: Dispatcher):
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º–µ polling...")
    with suppress(Exception):
        await bot.send_message(ADMIN_CHAT_ID, f"‚úÖ <b>–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!</b>")

async def on_shutdown(dispatcher: Dispatcher):
    logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    await safetrade_client.close()
    await bot.session.close()
    logger.info("‚úÖ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---
async def main():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    await dp.start_polling(bot)

if __name__ == "__main__":
    if not all([API_KEY, API_SECRET, TELEGRAM_BOT_TOKEN, ADMIN_CHAT_ID]):
        logger.critical("–ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")
        sys.exit(1)
    
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}", exc_info=True)
