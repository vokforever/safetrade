#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∏ NOCK
"""

import os
import sys
import logging
from dotenv import load_dotenv
import yaml
from pathlib import Path

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def test_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    logging.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_path = Path("config.yml")
    if not config_path.exists():
        logging.error("‚ùå –§–∞–π–ª config.yml –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        allowed_currencies = config.get('trading', {}).get('allowed_currencies', [])
        excluded_currencies = config.get('trading', {}).get('excluded_currencies', [])
        
        logging.info(f"‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã: {allowed_currencies}")
        logging.info(f"‚úÖ –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã: {excluded_currencies}")
        
        if 'NOCK' in allowed_currencies:
            logging.info("‚úÖ NOCK –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç")
            return True
        else:
            logging.error("‚ùå NOCK –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç")
            return False
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    logging.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = ['SAFETRADE_API_KEY', 'SAFETRADE_API_SECRET', 'SUPABASE_URL', 'SUPABASE_KEY']
    missing_vars = []
    
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        logging.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {missing_vars}")
        return False
    
    logging.info("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    return True

def test_supabase_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Supabase"""
    logging.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Supabase...")
    
    try:
        from supabase import create_client
        
        supabase_url = os.getenv("SUPABASE_URL")
        supabase_key = os.getenv("SUPABASE_KEY")
        
        if not supabase_url or not supabase_key:
            logging.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase")
            return False
        
        supabase = create_client(supabase_url, supabase_key)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü
        result = supabase.table('safetrade_order_history').select('symbol').limit(1).execute()
        logging.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        logging.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ safetrade_order_history –¥–æ—Å—Ç—É–ø–Ω–∞")
        
        return True
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Supabase: {e}")
        return False

def test_nock_trading_pair():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã NOCK/USDT"""
    logging.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã NOCK/USDT...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ main.py
        sys.path.append('.')
        from main import get_all_markets, ALLOWED_CURRENCIES
        
        markets = get_all_markets()
        if not markets:
            logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã")
            return False
        
        # –ò—â–µ–º NOCK/USDT
        knock_usdt_found = False
        for market in markets:
            symbol = market.get('id', '').upper()
            base_unit = market.get('base_unit', '').upper()
            quote_unit = market.get('quote_unit', '').upper()
            
            if symbol == 'NOCKUSDT' or (base_unit == 'NOCK' and quote_unit == 'USDT'):
                knock_usdt_found = True
                logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: {symbol}")
                break
        
        if not knock_usdt_found:
            logging.warning("‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ NOCK/USDT –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        return True
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã: {e}")
        return False

def test_autosell_logic():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∏"""
    logging.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∏...")
    
    try:
        sys.path.append('.')
        from main import get_sellable_balances, prioritize_sales
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤
        balances = get_sellable_balances()
        if balances is None:
            logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã")
            return False
        
        logging.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –±–∞–ª–∞–Ω—Å—ã: {list(balances.keys())}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—é
        if balances:
            priority_scores = prioritize_sales(balances)
            logging.info(f"‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(priority_scores)} –≤–∞–ª—é—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ NOCK –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ–∑–∞—Ü–∏–∏
            knock_found = any(score.currency == 'NOCK' for score in priority_scores)
            if knock_found:
                logging.info("‚úÖ NOCK –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ–∑–∞—Ü–∏–∏")
            else:
                logging.info("‚ÑπÔ∏è NOCK –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–∏—Ö –±–∞–ª–∞–Ω—Å–∞—Ö")
        
        return True
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∏ NOCK")
    
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", test_environment),
        ("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Supabase", test_supabase_connection),
        ("–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ NOCK/USDT", test_nock_trading_pair),
        ("–õ–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∏", test_autosell_logic)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        logging.info(f"\nüìã –¢–µ—Å—Ç: {test_name}")
        try:
            if test_func():
                passed += 1
                logging.info(f"‚úÖ –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–π–¥–µ–Ω")
            else:
                logging.error(f"‚ùå –¢–µ—Å—Ç '{test_name}' –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
    
    logging.info(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        logging.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ê–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∞ NOCK –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        return True
    else:
        logging.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)